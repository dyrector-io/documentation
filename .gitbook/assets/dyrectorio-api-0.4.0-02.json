{
  "openapi": "3.0.0",
  "paths": {
    "/api/products": {
      "get": {
        "operationId": "ProductHttpController_getProducts",
        "summary": "Fetch the products list.",
        "description": "Returns a list of a team's products and their details.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of products",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProductListItemDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          }
        },
        "tags": [
          "products"
        ]
      },
      "post": {
        "operationId": "ProductHttpController_createProduct",
        "summary": "Create a new product for a team.",
        "description": "Create a new product for a team. Newly created team has a `type` and a `name` as required variables, and optionally a `description` and a `changelog`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New product created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductListItemDto"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/api/products/{productId}": {
      "get": {
        "operationId": "ProductHttpController_getProductDetails",
        "summary": "Fetch details of a product.",
        "description": "Returns a product's details. The response should contain an array, consisting of the product's `name`, `id`, `type`, `description`, `deletability`, versions and version related data, including version `name` and `id`, `changelog`, increasibility.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "products"
        ]
      },
      "put": {
        "operationId": "ProductHttpController_updateProduct",
        "summary": "Update a product.",
        "description": "Updates a product. `productId` is a required variable to identify which product is modified, `name`, `description` and `changelog` can be adjusted with this call.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Product details are modified."
          }
        },
        "tags": [
          "products"
        ]
      },
      "delete": {
        "operationId": "ProductHttpController_deleteProduct",
        "summary": "Delete a product.",
        "description": "Deletes a product with the specified `productId`",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Product deleted."
          }
        },
        "tags": [
          "products"
        ]
      }
    },
    "/api/products/{productId}/versions": {
      "get": {
        "operationId": "VersionHttpController_getVersions",
        "summary": "Fetch the list of all the versions under a product.",
        "description": "Returns an array containing the every version that belong to a product. `productId` refers to the product's ID. Details include the version's `name`, `id`, `type`, `audit` log details, `changelog`, and increasibility.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameContains",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array with the every version of a product.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VersionDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      },
      "post": {
        "operationId": "VersionHttpController_createVersion",
        "summary": "Create a new version.",
        "description": "Creates a new version in a product. `productId` refers to the product's ID. Request must include the `name` and `type` of the version, `changelog` is optionable. Response should include the `name`, `id`, `changelog`, increasibility, `type`, and `audit` log details of the version.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDto"
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/products/{productId}/versions/{versionId}": {
      "get": {
        "operationId": "VersionHttpController_getVersion",
        "summary": "Retrieve the details of a version of a product.",
        "description": "Returns the details of a version in the product. `productId` refers to the product's ID, `versionId` refers to the version's ID. Details include the version's `name`, `id`, `type`, `audit` log details, `changelog`, increasibility, mutability, deletability, and all image related data, including `name`, `id`, `tag`, `order` and configuration data of the images.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a version under a product is fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      },
      "put": {
        "operationId": "VersionHttpController_updateVersion",
        "summary": "Modify version.",
        "description": "Updates a version's `name` and `changelog`. `productId` refers to the product's ID, `versionId` refers to the version's ID. Both are required variables.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVersionDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Changelog of a version is updated."
          }
        },
        "tags": [
          "versions"
        ]
      },
      "delete": {
        "operationId": "VersionHttpController_deleteVersion",
        "summary": "Delete a version.",
        "description": "This call deletes a version. `productId` refers to the product's ID, `versionId` refers to the version's ID. Both are required variables.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Version deleted."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/products/{productId}/versions/{versionId}/default": {
      "put": {
        "operationId": "VersionHttpController_setDefaultVersion",
        "summary": "Turn version into a default one of the complex product other versions under it will inherit images and deployments from.",
        "description": "This call turns a version into the default one, resulting other versions within this product later inherit images, deployments and their configurations from it. `productId` refers to the product's ID, `versionId` refers to the version's ID. Both are required variables.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Version turned into default."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/products/{productId}/versions/{versionId}/increase": {
      "post": {
        "operationId": "VersionHttpController_increaseVersion",
        "summary": "Increase a the version of a complex product with a new version.",
        "description": "Increases the version of a product with a new child version. `productId` refers to the product's ID, `versionId` refers to the version's ID, `name` refers to the name of the new version. All are required variables.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncreaseVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDto"
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/products/{productId}/versions/{versionId}/images": {
      "get": {
        "operationId": "ImageHttpController_getImagesByVersionId",
        "summary": "Fetch data of all images of a version.",
        "description": "Fetch details of images within a version. `ProductId` refers to the product's ID, `versionId` refers to the version's ID. Both are required variables.</br></br>Details come in an array, including `name`, `id`, `tag`, `order`, and config details of the image.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of images listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "post": {
        "operationId": "ImageHttpController_addImagesToVersion",
        "summary": "Add images to a version.",
        "description": "Add new images to a version. `productId` refers to the product's ID, `versionId` refers to the version's ID, `registryId` refers to the registry's ID, `images` refers to the name(s) of the images you'd like to add. All are required variables.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddImagesDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New image added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/products/{productId}/versions/{versionId}/images/{imageId}": {
      "get": {
        "operationId": "ImageHttpController_getImageDetails",
        "summary": "Fetch data of an image of a version.",
        "description": "Fetch details of an image within a version. `productId` refers to the product's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All are required parameters.</br></br>Image details consists `name`, `id`, `tag`, `order`, and the config of the image.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of an image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDto"
                }
              }
            }
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "patch": {
        "operationId": "ImageHttpController_patchImage",
        "summary": "Configure an image of a version.",
        "description": "Modify the configuration variables of an image. `productId` refers to the product's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All are required variables. `Tag` refers to the version of the image, `config` is an object of configuration variables.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchImageDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Image's configure variables updated."
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "delete": {
        "operationId": "ImageHttpController_deleteImage",
        "summary": "Delete an image from a version.",
        "description": "Delete an image. `productId` refers to the product's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All are required variables.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an image from a version."
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/products/{productId}/versions/{versionId}/images/order": {
      "put": {
        "operationId": "ImageHttpController_orderImages",
        "summary": "Edit image deployment order of a version.",
        "description": "Edit image deployment order of a version. `productId` refers to the product's ID, `versionId` refers to the version's ID. Both are required variables. Request should include the IDs of the images in an array.",
        "parameters": [
          {
            "name": "productId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Image order modified."
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/registries": {
      "get": {
        "operationId": "RegistryHttpController_getRegistries",
        "summary": "Fetch data of registries.",
        "description": "Lists every registries available in the active team. Response is an array including the `name`, `id`, `type`, `description`, and `icon` of the registry.</br></br>Registries are 3rd party registries where the container images are stored.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Data of all registries within a team listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistryDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "registries"
        ]
      },
      "post": {
        "operationId": "RegistryHttpController_createRegistry",
        "summary": "Create a new registry.",
        "description": "To add a new registry, include the `name`, `type`, `description`, `details`, and `icon`. `Type`, `details`, and `name` are required. Response is an array including the `name`, `id`, `type`, `description`, `imageNamePrefix`, `inUse`, `icon`, and audit log info of the registry.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegistryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "New registry created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "registries"
        ]
      }
    },
    "/api/registries/{registryId}": {
      "get": {
        "operationId": "RegistryHttpController_getRegistry",
        "summary": "Fetch data of a registry.",
        "description": "Lists the details of a registry. `registryId` refers to the registry's ID. Response is an array including the `name`, `id`, `type`, `description`, `imageNamePrefix`, `inUse`, `icon`, and audit log info of the registry.",
        "parameters": [
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of a registry listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "registries"
        ]
      },
      "put": {
        "operationId": "RegistryHttpController_updateRegistry",
        "summary": "Modify the details of a registry.",
        "description": "Modify the `name`, `type`, `description`, `details`, and `icon`. `registryId` refers to the registry's ID. `registryId`, `type`, `details`, and `name` are required.",
        "parameters": [
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegistryDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Registry modified."
          }
        },
        "tags": [
          "registries"
        ]
      },
      "delete": {
        "operationId": "RegistryHttpController_deleteRegistry",
        "summary": "Delete a registry from dyrectorio.",
        "description": "Deletes a registry with the specified `registryId`",
        "parameters": [
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Registry deleted."
          }
        },
        "tags": [
          "registries"
        ]
      }
    },
    "/api/teams": {
      "get": {
        "operationId": "TeamHttpController_getTeams",
        "summary": "Fetch data of teams the user is a member of.",
        "description": "List of teams consist of `name`, `id`, and `statistics`, including number of `users`, `products`, `nodes`, `versions`, and `deployments`.</br></br>Teams are the shared entity of multiple users. The purpose of teams is to separate users, nodes and products based on their needs within an organization. Team owners can assign roles. More details about teams here.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of teams and their statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      },
      "post": {
        "operationId": "TeamHttpController_createTeam",
        "summary": "Create new team.",
        "description": "Request must include `name`, which is going to be the name of the newly made team. Response should include `name`, `id`, and `statistics`, including number of `users`, `products`, `nodes`, `versions`, and `deployments`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "New team created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}": {
      "get": {
        "operationId": "TeamHttpController_getTeamById",
        "summary": "Fetch data of a team the user is a member of.",
        "description": "Get the details of a team. Request must include `teamId`, which is the ID of the team they'd like to get the data of. Data of teams consist of `name`, `id`, and `statistics`, including number of `users`, `products`, `nodes`, `versions`, and `deployments`. Response should include user details, as well, including `name`, `id`, `role`, `status`, `email`, and `lastLogin`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      },
      "put": {
        "operationId": "TeamHttpController_updateTeam",
        "summary": "Modify a team's name.",
        "description": "Request must include `teamId` and `name`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Team name modified."
          }
        },
        "tags": [
          "teams"
        ]
      },
      "delete": {
        "operationId": "TeamHttpController_deleteTeam",
        "summary": "Deletes a team.",
        "description": "Request must include `teamId`. Owner access required for successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team deleted."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users": {
      "post": {
        "operationId": "TeamHttpController_inviteUserToTeam",
        "summary": "Invite a new user to the team.",
        "description": "Request must include `teamId`, email and `firstName`. Admin access required for a successful request.</br></br>Response should include new user's `name`, `id`, `role`, `status`, `email`, and `lastLogin`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "User invited.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}/role": {
      "put": {
        "operationId": "TeamHttpController_updateUserRoleInTeam",
        "summary": "Edit user role.",
        "description": "Promotes or demotes the user. Request must include `teamId`, `userId` and `role`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User's role modified."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}": {
      "delete": {
        "operationId": "TeamHttpController_deleteUserFromTeam",
        "summary": "Remove a user from the team.",
        "description": "Removes the user from the team. Request must include `teamId`, `userId`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User removed from a team."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}/reinvite": {
      "post": {
        "operationId": "TeamHttpController_reinviteUser",
        "summary": "Reinvite user with a pending invite status to a team.",
        "description": "This call sends a new invitation link to a user who hasn't accepted invitation to a team.</br></br>Request must include `teamId`, `userId`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "New invite link sent."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/users/me": {
      "post": {
        "operationId": "UserHttpController_getUserMeta",
        "summary": "Fetch the current user.",
        "description": "Response includes the `user`, `activeTeamId`, `teams`, and `invitations`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Fetch the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMetaDto"
                }
              }
            }
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/users/me/active-team": {
      "post": {
        "operationId": "UserHttpController_activateTeam",
        "summary": "Sets the active team.",
        "description": "Request must include `teamID`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateTeamDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Set the active team."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/users/me/invitations/{teamId}": {
      "post": {
        "operationId": "UserHttpController_acceptTeamInvitation",
        "summary": "Accept invitation to a team.",
        "description": "Request must include `teamID`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation accepted."
          }
        },
        "tags": [
          "users/me"
        ]
      },
      "delete": {
        "operationId": "UserHttpController_declineTeamInvitation",
        "summary": "Decline invitation to a team.",
        "description": "Request must include `teamID`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation declined."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/deployments": {
      "get": {
        "operationId": "DeployHttpController_getDeployments",
        "summary": "Fetch the list of deployments.",
        "description": "Get the list of deployments. A deployment should include `id`, `prefix`, `status`, `note`, `audit` log details, product `name`, `id`, `type`, version `name`, `type`, `id`, and node `name`, `id`, `type`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of deployments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "post": {
        "operationId": "DeployHttpController_createDeployment",
        "summary": "Create new deployment.",
        "description": "Request must include `versionId`, `nodeId`, and `prefix`, which refers to the ID of a version, a node and the prefix of the deployment. Response should include deployment `id`, `prefix`, `status`, `note`, and `audit` log details, as well as product `type`, `id`, `name`, version `type`, `id`, `name`, and node `type`, `id`, `name`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New deployment created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}": {
      "get": {
        "operationId": "DeployHttpController_getDeploymentDetails",
        "summary": "Retrieve details of a deployment.",
        "description": "Get details of a certain deployment. Request must include `deploymentId`. Deployment details should include `id`, `prefix`, `environment`, `status`, `note`, `audit` log details, product `name`, `id`, `type`, version `name`, `type`, `id`, and node `name`, `id`, `type`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a deployment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "patch": {
        "operationId": "DeployHttpController_patchDeployment",
        "summary": "Update deployment.",
        "description": "Request must include `deploymentId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Deployment modified."
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "delete": {
        "operationId": "DeployHttpController_deleteDeployment",
        "summary": "Delete deployment.",
        "description": "Request must include `deploymentId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment deleted."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/instances/{instanceId}": {
      "get": {
        "operationId": "DeployHttpController_getInstance",
        "summary": "Get details of a soon-to-be container.",
        "description": "Request must include `deploymentId` and `instanceId`, which refer to the ID of a deployment and the instance. Instances are the manifestation of an image in the deployment. Response should include `state`, `id`, `updatedAt`, and `image` details including `id`, `name`, `tag`, `order` and `config` variables.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of an instance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "patch": {
        "operationId": "DeployHttpController_patchInstance",
        "summary": "Update instance configuration.",
        "description": "Request must include `deploymentId` and `instanceId` and portion of the instance configuration as `config`. Response should include `config` variables in an array.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchInstanceDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Instance configuration updated."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/instances/{instanceId}/secrets": {
      "get": {
        "operationId": "DeployHttpController_getDeploymentSecrets",
        "summary": "Fetch secrets of a soon-to-be container.",
        "description": "Request must include `deploymentId` and `instanceId`, which refers to the ID of a deployment and the instance. Response should include container `prefix` and `name`, and `publicKey`, `keys`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secrets of an instance listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceSecretsDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/start": {
      "post": {
        "operationId": "DeployHttpController_startDeployment",
        "summary": "Start the deployment process.",
        "description": "Request must include `deploymentId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment initiated."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/copy": {
      "post": {
        "operationId": "DeployHttpController_copyDeployment",
        "summary": "Copy deployment.",
        "description": "Request must include `deploymentId` and `force`, which is when true will overwrite the existing preparing deployment. Response should include deployment data: `id`, `prefix`, `status`, `note`, and miscellaneous details of `audit` log, `product`, `version`, and `node`.",
        "parameters": [
          {
            "name": "force",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Deployment copied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/log": {
      "get": {
        "operationId": "DeployHttpController_deploymentLog",
        "summary": "Fetch event log of a deployment.",
        "description": "Request must include `deploymentId`. Response should include an `items` array with objects of `type`, `deploymentStatus`, `createdAt`, `log`, and `containerState` which consists of `state` and `instanceId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "try",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment event log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentLogListDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/tokens": {
      "get": {
        "operationId": "TokenHttpController_getTokens",
        "summary": "List of tokens.",
        "description": "Access token's support is to provide secure access to the HTTP api without a cookie.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Token list fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tokens"
        ]
      },
      "post": {
        "operationId": "TokenHttpController_generateToken",
        "summary": "Create access token.",
        "description": "Request must include `name` and `expirationInDays`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "description": "Token created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedTokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/api/tokens/{tokenId}": {
      "get": {
        "operationId": "TokenHttpController_getToken",
        "summary": "Fetch token details.",
        "description": "Access token's details are `name`, `id`, and the time of creation and expiration. Request must include `tokenId`.",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token details listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "tokens"
        ]
      },
      "delete": {
        "operationId": "TokenHttpController_deleteToken",
        "summary": "Delete an access token.",
        "description": "Request must include `tokenId`.",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete token."
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/api/nodes": {
      "get": {
        "operationId": "NodeHttpController_getNodes",
        "summary": "Get data of nodes that belong to your team.",
        "description": "Fetch data of deployment targets. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, and `name`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Data of nodes listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "post": {
        "operationId": "NodeHttpController_createNode",
        "summary": "Create new node.",
        "description": "Request must include the node's `name`. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, and `name`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New node created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDto"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}": {
      "get": {
        "operationId": "NodeHttpController_getNodeDetails",
        "summary": "Get data of nodes that belong to your team.",
        "description": "Fetch data of a specific node. Request must include `nodeId`. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, `name`, `hasToken`, and agent installation details.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of the node.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "put": {
        "operationId": "NodeHttpController_updateNode",
        "summary": "Update details of a node.",
        "description": "Request must include the node's `name`, body can include `description` and `icon`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNodeDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Node details modified."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "NodeHttpController_deleteNode",
        "summary": "Delete node.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Node deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/script": {
      "post": {
        "operationId": "NodeHttpController_generateScript",
        "summary": "Create agent install script.",
        "description": "Request must include `nodeId`, `type` and `scriptType`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeGenerateScriptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Install script generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeInstallDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeInstallDto"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "NodeHttpController_discardScript",
        "summary": "Delete node set up install script.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Agent install script deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "get": {
        "operationId": "NodeHttpController_getScript",
        "summary": "Fetch install script.",
        "description": "Request must include `nodeId`. Response should include `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, `name`, `hasToken`, and `install` details.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/token": {
      "delete": {
        "operationId": "NodeHttpController_revokeToken",
        "summary": "Revoke the node's access token.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Token revoked."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/update": {
      "post": {
        "operationId": "NodeHttpController_updateNodeAgent",
        "summary": "Update node's data.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Node details modified."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}/start": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_startContainer",
        "summary": "Start a container deployed with dyrectorio on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container started."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}/stop": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_stopContainer",
        "summary": "Stop a container deployed with dyrectorio on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container stopped."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}/restart": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_restartContainer",
        "summary": "Restart a container deployed with dyrectorio on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container restarted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers": {
      "delete": {
        "operationId": "NodePrefixContainerHttpController_deleteAllContainers",
        "summary": "Delete containers deployed with dyrectorio, with the specified prefix on a node.",
        "description": "Request must include `nodeId`, and `prefix`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Containers deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}": {
      "delete": {
        "operationId": "NodePrefixContainerHttpController_deleteContainer",
        "summary": "Delete a container deployed with dyrectorio, with the specified prefix and name on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers": {
      "get": {
        "operationId": "NodeGlobalContainerHttpController_getContainers",
        "summary": "Fetch data of all containers on a node.",
        "description": "Request must include `nodeId` and `prefix`. Response should include `id`, `command`, `createdAt`, `state`, `status`, `imageName`, `imageTag` and `ports` of images.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch data of containers running on a node.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}/start": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_startContainer",
        "summary": "Start the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container started."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}/stop": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_stopContainer",
        "summary": "Stop the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container stopped."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}/restart": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_restartContainer",
        "summary": "Restart the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container restarted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}": {
      "delete": {
        "operationId": "NodeGlobalContainerHttpController_deleteContainer",
        "summary": "Delete the specific container from a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/audit-log": {
      "get": {
        "operationId": "AuditController_getAuditLog",
        "summary": "Fetch audit log.",
        "description": "Request must include `skip`, `take`, and dates of `from` and `to`. Response should include an array of `items`: `createdAt` date, `userId`, `email`, `serviceCall`, and `data`.",
        "parameters": [
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of the Audit log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogListDto"
                }
              }
            }
          }
        },
        "tags": [
          "audit-log"
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "HealthHttpController_getHealth",
        "summary": "Return service status of the platform.",
        "description": "Response should include `status`, `version` of the platform and `lastMigration` of database.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Service status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthDto"
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/notifications": {
      "get": {
        "operationId": "NotificationHttpController_getNotifications",
        "summary": "Retrieve notifications that belong to a team.",
        "description": "Response should include `type`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Notifications listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "post": {
        "operationId": "NotificationHttpController_createNotification",
        "summary": "Create a new notification.",
        "description": "Request must include `type`, `enabledEvents`, `id`, `name`, `url`, and `active`. Response should list `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New notification created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/{notificationId}": {
      "get": {
        "operationId": "NotificationHttpController_getNotificationDetails",
        "summary": "Fetch details of a notification.",
        "description": "Request must include `notificationId` parameter. Response should include `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of notification listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "put": {
        "operationId": "NotificationHttpController_updateNotification",
        "summary": "Modify a notification.",
        "description": "Request must include `notificationId`, `type`, `enabledEvents`, `id`, `name`, `url`, and `active`. Response should include `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification modified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          },
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDto"
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "delete": {
        "operationId": "NotificationHttpController_deleteNotification",
        "summary": "Delete a notification.",
        "description": "Request must include `notificationId`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notification deleted."
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/{notificationId}/test": {
      "post": {
        "operationId": "NotificationHttpController_testNotification",
        "summary": "Send a test message.",
        "description": "Request must include `notificationId`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Test message sent."
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/templates": {
      "get": {
        "operationId": "TemplateHttpController_getTemplates",
        "summary": "Return list of templates on the platform.",
        "description": "Response should include `id`, `name`, `description` and `technologies` of templates.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Templates listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "templates"
        ]
      },
      "post": {
        "operationId": "TemplateHttpController_createProduct",
        "summary": "Creates a new product from the selected template.",
        "description": "Request must include `type`, `id`, and `name`. Response should include `id`, `name`, `description`, `type`, and `audit` log details of templates.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductFromTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New product created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProductDto"
                }
              }
            }
          }
        },
        "tags": [
          "templates"
        ]
      }
    },
    "/api/templates/{templateId}/image": {
      "get": {
        "operationId": "TemplateHttpController_getImage",
        "summary": "Retrieves the picture of the template",
        "description": "Request must include `templateId`.",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve data of an image of a template."
          }
        },
        "tags": [
          "templates"
        ]
      }
    },
    "/api/dashboard": {
      "get": {
        "operationId": "DashboardHttpController_getDashboard",
        "summary": "Fetch dashboard data of latest activities.",
        "description": "Response should include `users`, number of `auditLogEntries`, `products`, `versions`, `deployments`, `failedDeployments`, details of `nodes`, `latestDeployments` and `auditLog` entries.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Dashboard data listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardDto"
                }
              }
            }
          }
        },
        "tags": [
          "dashboard"
        ]
      }
    },
    "/api/storages": {
      "get": {
        "operationId": "StorageHttpController_getStorages",
        "summary": "Fetch the list of storages.",
        "description": "Response should include `description`, `icon`, `url`, `id`, and `name`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of storages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      },
      "post": {
        "operationId": "StorageHttpController_createProduct",
        "summary": "Create a new storage.",
        "description": "Creates a new storage. Request must include `name`, and `url`. Request body may include `description`, `icon`, `accesKey`, and `secretKey`. Response should include `description`, `icon`, `url`, `id`, `name`, `accessKey`, `secretKey`, and `inUse`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStorageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New storage created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/storages/options": {
      "get": {
        "operationId": "StorageHttpController_getStorageOptions",
        "summary": "Fetch the name and ID of available storage options.",
        "description": "Response should include `id`, and `name`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Name and ID of storage options listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageOptionDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/storages/{storageId}": {
      "get": {
        "operationId": "StorageHttpController_getProductDetails",
        "summary": "Return details of a storage.",
        "description": "Get the details of a storage. Request must include `storageId`. Response should include description, icon, url, `id`, `name`, `accessKey`, `secretKey`, and `inUse`.",
        "parameters": [
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Storage details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      },
      "put": {
        "operationId": "StorageHttpController_updateProduct",
        "summary": "Modify a storage.",
        "description": "Updates a storage. Request must include `storageId`, `name`, and `url`. Request body may include `description`, `icon`, `accesKey`, and `secretKey`.",
        "parameters": [
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStorageDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Storage updated."
          }
        },
        "tags": [
          "storages"
        ]
      },
      "delete": {
        "operationId": "StorageHttpController_deleteProduct",
        "summary": "Delete a storage from dyrectorio.",
        "description": "Deletes a storage Request must include `storageId`.",
        "parameters": [
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Storage deleted."
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/metrics": {
      "get": {
        "operationId": "MetricsController_index",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Prometheus metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ]
      }
    }
  },
  "info": {
    "title": "dyrectorio platform API",
    "description": "The dyrectorio platform API documentation.",
    "version": "0.3.4",
    "contact": {
      
    }
  },
  "tags": [
    {
      "name": "products",
      "description": "There are two kinds of products in dyrectorio: Simple and Complex. Simple products make up one deployable unit without versioning, while Complex products come with multiple rolling or incremental versions. More details in dyrectorio platform [documentation](https://docs.dyrector.io/tutorials/create-your-product)."
    },
    {
      "name": "versions",
      "description": "Versions belong to products. While Simple Products are technically versionless, they act as a rolling version of a Complex Product.</br></br>The purpose of versions is to separate different variations of your product. They can be either rolling or incremental. One Complex Product can have multiple versions of both types. More details about rolling and incremental versions in dyrectorio platform [documentation](https://docs.dyrector.io/get-started/components#product)."
    },
    {
      "name": "version/images",
      "description": "Images make up a Complex Product's version, or a Simple Product."
    },
    {
      "name": "registries",
      "description": "Registries are 3rd party registries where the images of versions are located. Learn more about registries in dyrectorio platform [documentation](https://docs.dyrector.io/get-started/components#registry)."
    },
    {
      "name": "teams",
      "description": "Teams are the shared entity of multiple users. The purpose of teams is to separate users, nodes and products based on their needs within an organization. Team owners can assign roles. More details about teams in dyrectorio platform [documentation](https://docs.dyrector.io/get-started/components#team)."
    },
    {
      "name": "users/me",
      "description": "users/me cover endpoints related to your user profile."
    },
    {
      "name": "deployments",
      "description": "Deployments are the process that gets the installation of your versions or Simple Products done on the node of your choice. More details about deployments in dyrectorio platform [documentation](https://docs.dyrector.io/get-started/components#deployment)."
    },
    {
      "name": "tokens",
      "description": "Tokens are the access tokens that grant you access to a user profile and the teams the profile is a member of."
    },
    {
      "name": "nodes",
      "description": "Nodes are the deployment targets. Nodes are registered by installing at least one of the agents - crane for Kubernetes, dagent for Docker. These agents connect the platform to your node. One team can have as many nodes as they like.</br></br>Node installation takes place with Shell or PowerShell scripts, which can be created or revoked. More details in dyrectorio platform [documentation](https://docs.dyrector.io/get-started/components#node)."
    },
    {
      "name": "audit-log",
      "description": "Audit log is a log of team activity generated by the platform."
    },
    {
      "name": "health",
      "description": "Health refers to the status of the different services that make up the platform. It can be checked to see if the platform works properly."
    },
    {
      "name": "notifications",
      "description": "Notifications are chat notifications in Slack, Discord, and Teams. They send an automated message about deployments, new versions, new nodes, and new users. More details in dyrectorio platform [documentation](https://docs.dyrector.io/tutorials/create-chat-notifications)."
    },
    {
      "name": "templates",
      "description": "Templates are preset applications that can be turned into a product right away. They can be deployed with minimal configuration. More details about templates in dyrectorio platform [documentation](https://docs.dyrector.io/features/templates)."
    },
    {
      "name": "dashboard",
      "description": "Dashboard summarizes the latest activities of a team."
    },
    {
      "name": "storages",
      "description": "Storages are S3 compatible memory storages. They can be used for file injection. More details in dyrectorio platform [documentation](https://docs.dyrector.io/features/storage)."
    }
  ],
  "servers": [
    
  ],
  "components": {
    "securitySchemes": {
      "jwt": {
        "scheme": "bearer",
        "bearerFormat": "Bearer",
        "type": "http",
        "description": "Please enter token in following format: "
      }
    },
    "schemas": {
      "AuditDto": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt",
          "updatedBy"
        ]
      },
      "ProductListItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "simple",
              "complex"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "versionCount": {
            "type": "number"
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "audit",
          "id",
          "name"
        ]
      },
      "VersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "changelog": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "increasable": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "audit",
          "default",
          "increasable",
          "id",
          "name"
        ]
      },
      "ProductDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "simple",
              "complex"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "deletable": {
            "type": "boolean"
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionDto"
            }
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "deletable",
          "versions",
          "audit",
          "id",
          "name"
        ]
      },
      "CreateProductDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "simple",
              "complex"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "changelog": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "UpdateProductDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "changelog": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "UniqueKeyValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "id",
          "key"
        ]
      },
      "UniqueSecretKeyDto": {
        "type": "object",
        "properties": {
          "required": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "required",
          "id",
          "key"
        ]
      },
      "ContainerConfigIngressDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "uploadLimit": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "host"
        ]
      },
      "ConfigContainerDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "keepFiles": {
            "type": "boolean"
          }
        },
        "required": [
          "image",
          "volume",
          "path",
          "keepFiles"
        ]
      },
      "PortDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "internal": {
            "type": "number"
          },
          "external": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "internal"
        ]
      },
      "PortRangeDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "number"
          },
          "to": {
            "type": "number"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "ContainerConfigPortRangeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "internal": {
            "$ref": "#/components/schemas/PortRangeDto"
          },
          "external": {
            "$ref": "#/components/schemas/PortRangeDto"
          }
        },
        "required": [
          "id",
          "internal",
          "external"
        ]
      },
      "VolumeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ro",
              "rwo",
              "rwx",
              "mem",
              "tmp"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "class": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "path"
        ]
      },
      "UniqueKeyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key"
        ]
      },
      "InitContainerVolumeLinkDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "path"
        ]
      },
      "InitContainerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "command": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "useParentConfig": {
            "type": "boolean"
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerVolumeLinkDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "image",
          "command",
          "args",
          "environment",
          "useParentConfig",
          "volumes"
        ]
      },
      "ContainerStorageDto": {
        "type": "object",
        "properties": {
          "storageId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "bucket": {
            "type": "string"
          }
        }
      },
      "LogDto": {
        "type": "object",
        "properties": {
          "driver": {
            "type": "string",
            "enum": [
              "none",
              "gcplogs",
              "local",
              "json-file",
              "syslog",
              "journald",
              "gelf",
              "fluentd",
              "awslogs",
              "splunk",
              "etwlogs",
              "logentries"
            ]
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          }
        },
        "required": [
          "driver",
          "options"
        ]
      },
      "HealthCheckDto": {
        "type": "object",
        "properties": {
          "port": {
            "type": "number"
          },
          "livenessProbe": {
            "type": "string"
          },
          "readinessProbe": {
            "type": "string"
          },
          "startupProbe": {
            "type": "string"
          }
        }
      },
      "ResourceDto": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "string"
          },
          "memory": {
            "type": "string"
          }
        }
      },
      "ResourceConfigDto": {
        "type": "object",
        "properties": {
          "limits": {
            "$ref": "#/components/schemas/ResourceDto"
          },
          "requests": {
            "$ref": "#/components/schemas/ResourceDto"
          }
        }
      },
      "MarkerDto": {
        "type": "object",
        "properties": {
          "service": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "deployment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "ingress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          }
        }
      },
      "ContainerConfigDto": {
        "type": "object",
        "properties": {
          "expose": {
            "type": "string",
            "enum": [
              "none",
              "expose",
              "exposeWithTls"
            ]
          },
          "restartPolicy": {
            "type": "string",
            "enum": [
              "always",
              "unlessStopped",
              "no",
              "onFailure"
            ]
          },
          "networkMode": {
            "type": "string",
            "enum": [
              "none",
              "host",
              "bridge",
              "overlay",
              "ipvlan",
              "macvlan"
            ]
          },
          "deploymentStrategy": {
            "type": "string",
            "enum": [
              "recreate",
              "rolling"
            ]
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueSecretKeyDto"
            }
          },
          "ingress": {
            "$ref": "#/components/schemas/ContainerConfigIngressDto"
          },
          "user": {
            "type": "number"
          },
          "tty": {
            "type": "boolean"
          },
          "configContainer": {
            "$ref": "#/components/schemas/ConfigContainerDto"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortDto"
            }
          },
          "portRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerConfigPortRangeDto"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeDto"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerDto"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/ContainerStorageDto"
          },
          "logConfig": {
            "$ref": "#/components/schemas/LogDto"
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "dockerLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "proxyHeaders": {
            "type": "boolean"
          },
          "useLoadBalancer": {
            "type": "boolean"
          },
          "extraLBAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "healthCheckConfig": {
            "$ref": "#/components/schemas/HealthCheckDto"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/ResourceConfigDto"
          },
          "annotations": {
            "$ref": "#/components/schemas/MarkerDto"
          },
          "labels": {
            "$ref": "#/components/schemas/MarkerDto"
          }
        },
        "required": [
          "expose",
          "restartPolicy",
          "networkMode",
          "deploymentStrategy",
          "name",
          "tty",
          "proxyHeaders",
          "useLoadBalancer"
        ]
      },
      "BasicRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "v2",
              "hub",
              "gitlab",
              "github",
              "google",
              "unchecked"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "ImageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "number"
          },
          "config": {
            "$ref": "#/components/schemas/ContainerConfigDto"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "registry": {
            "$ref": "#/components/schemas/BasicRegistryDto"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "config",
          "createdAt",
          "registry"
        ]
      },
      "BasicNodeWithStatus": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "DeploymentWithBasicNodeDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "note": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "node": {
            "$ref": "#/components/schemas/BasicNodeWithStatus"
          },
          "id": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "updatedAt",
          "node",
          "id",
          "prefix"
        ]
      },
      "VersionDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "changelog": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "increasable": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "mutable": {
            "type": "boolean"
          },
          "deletable": {
            "type": "boolean"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageDto"
            }
          },
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentWithBasicNodeDto"
            }
          }
        },
        "required": [
          "type",
          "audit",
          "default",
          "increasable",
          "id",
          "name",
          "mutable",
          "deletable",
          "images",
          "deployments"
        ]
      },
      "CreateVersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "name": {
            "type": "string"
          },
          "changelog": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "UpdateVersionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "changelog": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "IncreaseVersionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "changelog": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "AddImagesDto": {
        "type": "object",
        "properties": {
          "registryId": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "registryId",
          "images"
        ]
      },
      "PartialContainerConfigDto": {
        "type": "object",
        "properties": {
          "expose": {
            "type": "string",
            "enum": [
              "none",
              "expose",
              "exposeWithTls"
            ]
          },
          "restartPolicy": {
            "type": "string",
            "enum": [
              "always",
              "unlessStopped",
              "no",
              "onFailure"
            ]
          },
          "networkMode": {
            "type": "string",
            "enum": [
              "none",
              "host",
              "bridge",
              "overlay",
              "ipvlan",
              "macvlan"
            ]
          },
          "deploymentStrategy": {
            "type": "string",
            "enum": [
              "recreate",
              "rolling"
            ]
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueSecretKeyDto"
            }
          },
          "ingress": {
            "$ref": "#/components/schemas/ContainerConfigIngressDto"
          },
          "user": {
            "type": "number"
          },
          "tty": {
            "type": "boolean"
          },
          "configContainer": {
            "$ref": "#/components/schemas/ConfigContainerDto"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortDto"
            }
          },
          "portRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerConfigPortRangeDto"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeDto"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerDto"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/ContainerStorageDto"
          },
          "logConfig": {
            "$ref": "#/components/schemas/LogDto"
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "dockerLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "proxyHeaders": {
            "type": "boolean"
          },
          "useLoadBalancer": {
            "type": "boolean"
          },
          "extraLBAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "healthCheckConfig": {
            "$ref": "#/components/schemas/HealthCheckDto"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/ResourceConfigDto"
          },
          "annotations": {
            "$ref": "#/components/schemas/MarkerDto"
          },
          "labels": {
            "$ref": "#/components/schemas/MarkerDto"
          }
        }
      },
      "PatchImageDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PartialContainerConfigDto"
              }
            ]
          }
        }
      },
      "RegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "v2",
              "hub",
              "gitlab",
              "github",
              "google",
              "unchecked"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "url"
        ]
      },
      "HubRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "imageNamePrefix": {
            "type": "string"
          }
        },
        "required": [
          "imageNamePrefix"
        ]
      },
      "V2RegistryDetailsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "url"
        ]
      },
      "GitlabRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "user": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "imageNamePrefix": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "apiUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "namespace",
          "user",
          "token",
          "imageNamePrefix"
        ]
      },
      "GithubRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "enum": [
              "organization",
              "user"
            ]
          },
          "user": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "imageNamePrefix": {
            "type": "string"
          }
        },
        "required": [
          "namespace",
          "user",
          "token",
          "imageNamePrefix"
        ]
      },
      "GoogleRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "imageNamePrefix": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "imageNamePrefix"
        ]
      },
      "UncheckedRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "RegistryDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "inUse": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "type",
          "details",
          "id",
          "name",
          "inUse",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "details",
          "name"
        ]
      },
      "UpdateRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "details",
          "name"
        ]
      },
      "TeamStatisticsDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "number"
          },
          "products": {
            "type": "number"
          },
          "nodes": {
            "type": "number"
          },
          "versions": {
            "type": "number"
          },
          "deployments": {
            "type": "number"
          }
        },
        "required": [
          "users",
          "products",
          "nodes",
          "versions",
          "deployments"
        ]
      },
      "TeamDto": {
        "type": "object",
        "properties": {
          "statistics": {
            "$ref": "#/components/schemas/TeamStatisticsDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "statistics",
          "id",
          "name"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "expired",
              "declined"
            ]
          },
          "email": {
            "type": "string"
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "role",
          "status",
          "email",
          "id",
          "name"
        ]
      },
      "TeamDetailsDto": {
        "type": "object",
        "properties": {
          "statistics": {
            "$ref": "#/components/schemas/TeamStatisticsDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          }
        },
        "required": [
          "statistics",
          "id",
          "name",
          "users"
        ]
      },
      "CreateTeamDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateTeamDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "InviteUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "captcha": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName"
        ]
      },
      "UpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user"
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "BasicTeamDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "UserMetaDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/UserDto"
          },
          "activeTeamId": {
            "type": "string"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicTeamDto"
            }
          },
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicTeamDto"
            }
          }
        },
        "required": [
          "teams",
          "invitations"
        ]
      },
      "ActivateTeamDto": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string"
          }
        },
        "required": [
          "teamId"
        ]
      },
      "BasicProductDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "simple",
              "complex"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "BasicVersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "BasicNodeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "DeploymentDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "product": {
            "$ref": "#/components/schemas/BasicProductDto"
          },
          "version": {
            "$ref": "#/components/schemas/BasicVersionDto"
          },
          "node": {
            "$ref": "#/components/schemas/BasicNodeDto"
          },
          "id": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "audit",
          "product",
          "version",
          "node",
          "id",
          "prefix"
        ]
      },
      "UniqueSecretKeyValueDto": {
        "type": "object",
        "properties": {
          "required": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "encrypted": {
            "type": "boolean"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "required",
          "id",
          "key",
          "value",
          "encrypted"
        ]
      },
      "InstanceContainerConfigDto": {
        "type": "object",
        "properties": {
          "expose": {
            "type": "string",
            "enum": [
              "none",
              "expose",
              "exposeWithTls"
            ]
          },
          "restartPolicy": {
            "type": "string",
            "enum": [
              "always",
              "unlessStopped",
              "no",
              "onFailure"
            ]
          },
          "networkMode": {
            "type": "string",
            "enum": [
              "none",
              "host",
              "bridge",
              "overlay",
              "ipvlan",
              "macvlan"
            ]
          },
          "deploymentStrategy": {
            "type": "string",
            "enum": [
              "recreate",
              "rolling"
            ]
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueSecretKeyValueDto"
            }
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "ingress": {
            "$ref": "#/components/schemas/ContainerConfigIngressDto"
          },
          "user": {
            "type": "number"
          },
          "tty": {
            "type": "boolean"
          },
          "configContainer": {
            "$ref": "#/components/schemas/ConfigContainerDto"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortDto"
            }
          },
          "portRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerConfigPortRangeDto"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeDto"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerDto"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/ContainerStorageDto"
          },
          "logConfig": {
            "$ref": "#/components/schemas/LogDto"
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "dockerLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "proxyHeaders": {
            "type": "boolean"
          },
          "useLoadBalancer": {
            "type": "boolean"
          },
          "extraLBAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "healthCheckConfig": {
            "$ref": "#/components/schemas/HealthCheckDto"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/ResourceConfigDto"
          },
          "annotations": {
            "$ref": "#/components/schemas/MarkerDto"
          },
          "labels": {
            "$ref": "#/components/schemas/MarkerDto"
          }
        }
      },
      "InstanceDto": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "nullable": true,
            "enum": [
              "created",
              "restarting",
              "running",
              "removing",
              "paused",
              "exited",
              "dead"
            ]
          },
          "id": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/ImageDto"
          },
          "config": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceContainerConfigDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "updatedAt",
          "image"
        ]
      },
      "DeploymentDetailsDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "product": {
            "$ref": "#/components/schemas/BasicProductDto"
          },
          "version": {
            "$ref": "#/components/schemas/BasicVersionDto"
          },
          "node": {
            "$ref": "#/components/schemas/BasicNodeDto"
          },
          "id": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceDto"
            }
          },
          "lastTry": {
            "type": "number"
          }
        },
        "required": [
          "status",
          "audit",
          "product",
          "version",
          "node",
          "id",
          "prefix",
          "environment",
          "instances",
          "lastTry"
        ]
      },
      "ContainerIdentifierDto": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "name"
        ]
      },
      "InstanceSecretsDto": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/ContainerIdentifierDto"
          },
          "publicKey": {
            "type": "string"
          },
          "keys": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "container",
          "publicKey"
        ]
      },
      "CreateDeploymentDto": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "versionId",
          "nodeId",
          "prefix"
        ]
      },
      "PatchDeploymentDto": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "environment": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          }
        }
      },
      "PatchInstanceDto": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/InstanceContainerConfigDto"
          }
        },
        "required": [
          "config"
        ]
      },
      "DeploymentEventContainerStateDto": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "created",
              "restarting",
              "running",
              "removing",
              "paused",
              "exited",
              "dead"
            ]
          },
          "instanceId": {
            "type": "string"
          }
        },
        "required": [
          "instanceId"
        ]
      },
      "DeploymentEventDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "log",
              "deployment-status",
              "container-status"
            ]
          },
          "deploymentStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "log": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "containerState": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentEventContainerStateDto"
              }
            ]
          }
        },
        "required": [
          "type",
          "createdAt"
        ]
      },
      "DeploymentLogListDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentEventDto"
            }
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "expiresAt",
          "createdAt"
        ]
      },
      "GenerateTokenDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "expirationInDays": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "expirationInDays"
        ]
      },
      "GeneratedTokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "expiresAt",
          "createdAt",
          "token"
        ]
      },
      "NodeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected"
            ]
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "connectedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "updating": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "NodeInstallDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "expireAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "command",
          "script",
          "expireAt"
        ]
      },
      "NodeDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected"
            ]
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "connectedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "updating": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hasToken": {
            "type": "boolean"
          },
          "install": {
            "$ref": "#/components/schemas/NodeInstallDto"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "hasToken"
        ]
      },
      "CreateNodeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateNodeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "DagentTraefikOptionsDto": {
        "type": "object",
        "properties": {
          "acmeEmail": {
            "type": "string"
          }
        },
        "required": [
          "acmeEmail"
        ]
      },
      "NodeGenerateScriptDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "scriptType": {
            "type": "string",
            "enum": [
              "shell",
              "powershell"
            ]
          },
          "rootPath": {
            "type": "string"
          },
          "dagentTraefik": {
            "$ref": "#/components/schemas/DagentTraefikOptionsDto"
          }
        },
        "required": [
          "type",
          "scriptType"
        ]
      },
      "ContainerPort": {
        "type": "object",
        "properties": {
          "internal": {
            "type": "number"
          },
          "external": {
            "type": "number"
          }
        },
        "required": [
          "internal",
          "external"
        ]
      },
      "ContainerDto": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ContainerIdentifierDto"
          },
          "command": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "imageTag": {
            "type": "string"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerPort"
            }
          }
        },
        "required": [
          "id",
          "command",
          "createdAt",
          "state",
          "status",
          "imageName",
          "imageTag",
          "ports"
        ]
      },
      "AuditLogDto": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "serviceCall": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "createdAt",
          "userId",
          "email",
          "serviceCall"
        ]
      },
      "AuditLogListDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogDto"
            }
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "HealthDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "object"
          },
          "version": {
            "type": "string"
          },
          "lastMigration": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "version"
        ]
      },
      "NotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "creatorName": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "url",
          "active",
          "creatorName"
        ]
      },
      "NotificationDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "creatorName": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "enabledEvents",
          "id",
          "name",
          "url",
          "active",
          "creatorName"
        ]
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "enabledEvents",
          "name",
          "url",
          "active"
        ]
      },
      "UpdateNotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "enabledEvents",
          "name",
          "url",
          "active"
        ]
      },
      "TemplateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "technologies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "technologies"
        ]
      },
      "CreateProductFromTemplateDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "simple",
              "complex"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "ProductDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "simple",
              "complex"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "audit",
          "id",
          "name"
        ]
      },
      "DashboardDeploymentDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "product": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "node": {
            "type": "string"
          },
          "changelog": {
            "type": "string"
          },
          "deployedAt": {
            "format": "date-time",
            "type": "string"
          },
          "productId": {
            "type": "string"
          },
          "versionId": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "product",
          "version",
          "node",
          "changelog",
          "deployedAt",
          "productId",
          "versionId"
        ]
      },
      "DashboardDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "number"
          },
          "auditLogEntries": {
            "type": "number"
          },
          "products": {
            "type": "number"
          },
          "versions": {
            "type": "number"
          },
          "deployments": {
            "type": "number"
          },
          "failedDeployments": {
            "type": "number"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicNodeDto"
            }
          },
          "latestDeployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DashboardDeploymentDto"
            }
          },
          "auditLog": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogDto"
            }
          }
        },
        "required": [
          "users",
          "auditLogEntries",
          "products",
          "versions",
          "deployments",
          "failedDeployments",
          "nodes",
          "latestDeployments",
          "auditLog"
        ]
      },
      "StorageDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "id",
          "name"
        ]
      },
      "StorageOptionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "StorageDetailsDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "inUse": {
            "type": "boolean"
          }
        },
        "required": [
          "url",
          "id",
          "name",
          "inUse"
        ]
      },
      "CreateStorageDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "UpdateStorageDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ]
      }
    }
  }
}