{
  "openapi": "3.0.0",
  "paths": {
    "/api/projects": {
      "get": {
        "operationId": "ProjectHttpController_getProjects",
        "summary": "Fetch the projects list.",
        "description": "Returns a list of a team's projects and their details.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectListItemDto"
                  }
                }
              }
            }
          },
          "204": {
            "description": ""
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "ProjectHttpController_createProject",
        "summary": "Create a new project for a team.",
        "description": "Create a new project for a team. Newly created team has a `type` and a `name` as required variables, and optionally a `description` and a `changelog`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New project created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListItemDto"
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/projects/{projectId}": {
      "get": {
        "operationId": "ProjectHttpController_getProjectDetails",
        "summary": "Fetch details of a project.",
        "description": "Returns a project's details. The response should contain an array, consisting of the project's `name`, `id`, `type`, `description`, `deletability`, versions and version related data, including version `name` and `id`, `changelog`, increasibility.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "ProjectHttpController_updateProject",
        "summary": "Update a project.",
        "description": "Updates a project. `projectId` is a required variable to identify which project is modified, `name`, `description` and `changelog` can be adjusted with this call.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Project details are modified."
          }
        },
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "ProjectHttpController_deleteProject",
        "summary": "Delete a project.",
        "description": "Deletes a project with the specified `projectId`",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted."
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/projects/{projectId}/versions": {
      "get": {
        "operationId": "VersionHttpController_getVersions",
        "summary": "Fetch the list of all the versions under a project.",
        "description": "Returns an array containing the every version that belong to a project. `projectId` refers to the project's ID. Details include the version's `name`, `id`, `type`, `audit` log details, `changelog`, and increasibility.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array with the every version of a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VersionDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      },
      "post": {
        "operationId": "VersionHttpController_createVersion",
        "summary": "Create a new version.",
        "description": "Creates a new version in a project. `projectId` refers to the project's ID. Request must include the `name` and `type` of the version, `changelog` is optionable. Response should include the `name`, `id`, `changelog`, increasibility, `type`, and `audit` log details of the version.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDto"
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/projects/{projectId}/versions/{versionId}": {
      "get": {
        "operationId": "VersionHttpController_getVersion",
        "summary": "Retrieve the details of a version of a project.",
        "description": "Returns the details of a version in the project. `projectId` refers to the project's ID, `versionId` refers to the version's ID. Details include the version's `name`, `id`, `type`, `audit` log details, `changelog`, increasibility, mutability, deletability, and all image related data, including `name`, `id`, `tag`, `order` and configuration data of the images.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a version under a project is fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      },
      "put": {
        "operationId": "VersionHttpController_updateVersion",
        "summary": "Modify version.",
        "description": "Updates a version's `name` and `changelog`. `projectId` refers to the project's ID, `versionId` refers to the version's ID. Both are required variables.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVersionDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Changelog of a version is updated."
          }
        },
        "tags": [
          "versions"
        ]
      },
      "delete": {
        "operationId": "VersionHttpController_deleteVersion",
        "summary": "Delete a version.",
        "description": "This call deletes a version. `projectId` refers to the project's ID, `versionId` refers to the version's ID. Both are required variables.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Version deleted."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/default": {
      "put": {
        "operationId": "VersionHttpController_setDefaultVersion",
        "summary": "Turn version into a default one of the versioned project other versions under it will inherit images and deployments from.",
        "description": "This call turns a version into the default one, resulting other versions within this project later inherit images, deployments and their configurations from it. `projectId` refers to the project's ID, `versionId` refers to the version's ID. Both are required variables.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Version turned into default."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/increase": {
      "post": {
        "operationId": "VersionHttpController_increaseVersion",
        "summary": "Increase a the version of a versioned project with a new version.",
        "description": "Increases the version of a project with a new child version. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `name` refers to the name of the new version. All are required variables.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncreaseVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDto"
                }
              }
            }
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/images": {
      "get": {
        "operationId": "ImageHttpController_getImagesByVersionId",
        "summary": "Fetch data of all images of a version.",
        "description": "Fetch details of images within a version. `ProjectId` refers to the project's ID, `versionId` refers to the version's ID. Both are required variables.</br></br>Details come in an array, including `name`, `id`, `tag`, `order`, and config details of the image.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of images listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "post": {
        "operationId": "ImageHttpController_addImagesToVersion",
        "summary": "Add images to a version.",
        "description": "Add new images to a version. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `registryId` refers to the registry's ID, `images` refers to the name(s) of the images you'd like to add. All are required variables.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddImagesDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New image added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/images/{imageId}": {
      "get": {
        "operationId": "ImageHttpController_getImageDetails",
        "summary": "Fetch data of an image of a version.",
        "description": "Fetch details of an image within a version. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All are required parameters.</br></br>Image details consists `name`, `id`, `tag`, `order`, and the config of the image.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of an image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDto"
                }
              }
            }
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "patch": {
        "operationId": "ImageHttpController_patchImage",
        "summary": "Configure an image of a version.",
        "description": "Modify the configuration variables of an image. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All are required variables. `Tag` refers to the version of the image, `config` is an object of configuration variables.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchImageDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Image's configure variables updated."
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "delete": {
        "operationId": "ImageHttpController_deleteImage",
        "summary": "Delete an image from a version.",
        "description": "Delete an image. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All are required variables.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an image from a version."
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/projects/{projectId}/versions/{versionId}/images/order": {
      "put": {
        "operationId": "ImageHttpController_orderImages",
        "summary": "Edit image deployment order of a version.",
        "description": "Edit image deployment order of a version. `projectId` refers to the project's ID, `versionId` refers to the version's ID. Both are required variables. Request should include the IDs of the images in an array.",
        "parameters": [
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Image order modified."
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/registries": {
      "get": {
        "operationId": "RegistryHttpController_getRegistries",
        "summary": "Fetch data of registries.",
        "description": "Lists every registries available in the active team. Response is an array including the `name`, `id`, `type`, `description`, and `icon` of the registry.</br></br>Registries are 3rd party registries where the container images are stored.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Data of all registries within a team listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistryDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "registries"
        ]
      },
      "post": {
        "operationId": "RegistryHttpController_createRegistry",
        "summary": "Create a new registry.",
        "description": "To add a new registry, include the `name`, `type`, `description`, `details`, and `icon`. `Type`, `details`, and `name` are required. Response is an array including the `name`, `id`, `type`, `description`, `imageNamePrefix`, `inUse`, `icon`, and audit log info of the registry.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegistryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "New registry created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "registries"
        ]
      }
    },
    "/api/registries/{registryId}": {
      "get": {
        "operationId": "RegistryHttpController_getRegistry",
        "summary": "Fetch data of a registry.",
        "description": "Lists the details of a registry. `registryId` refers to the registry's ID. Response is an array including the `name`, `id`, `type`, `description`, `imageNamePrefix`, `inUse`, `icon`, and audit log info of the registry.",
        "parameters": [
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of a registry listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "registries"
        ]
      },
      "put": {
        "operationId": "RegistryHttpController_updateRegistry",
        "summary": "Modify the details of a registry.",
        "description": "Modify the `name`, `type`, `description`, `details`, and `icon`. `registryId` refers to the registry's ID. `registryId`, `type`, `details`, and `name` are required.",
        "parameters": [
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegistryDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Registry modified."
          }
        },
        "tags": [
          "registries"
        ]
      },
      "delete": {
        "operationId": "RegistryHttpController_deleteRegistry",
        "summary": "Delete a registry from dyrector.io.",
        "description": "Deletes a registry with the specified `registryId`",
        "parameters": [
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Registry deleted."
          }
        },
        "tags": [
          "registries"
        ]
      }
    },
    "/api/teams": {
      "get": {
        "operationId": "TeamHttpController_getTeams",
        "summary": "Fetch data of teams the user is a member of.",
        "description": "List of teams consist of `name`, `id`, and `statistics`, including number of `users`, `projects`, `nodes`, `versions`, and `deployments`.</br></br>Teams are the shared entity of multiple users. The purpose of teams is to separate users, nodes and projects based on their needs within an organization. Team owners can assign roles. More details about teams here.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of teams and their statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      },
      "post": {
        "operationId": "TeamHttpController_createTeam",
        "summary": "Create new team.",
        "description": "Request must include `name`, which is going to be the name of the newly made team. Response should include `name`, `id`, and `statistics`, including number of `users`, `projects`, `nodes`, `versions`, and `deployments`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "New team created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}": {
      "get": {
        "operationId": "TeamHttpController_getTeamById",
        "summary": "Fetch data of a team the user is a member of.",
        "description": "Get the details of a team. Request must include `teamId`, which is the ID of the team they'd like to get the data of. Data of teams consist of `name`, `id`, and `statistics`, including number of `users`, `projects`, `nodes`, `versions`, and `deployments`. Response should include user details, as well, including `name`, `id`, `role`, `status`, `email`, and `lastLogin`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      },
      "put": {
        "operationId": "TeamHttpController_updateTeam",
        "summary": "Modify a team's name.",
        "description": "Request must include `teamId` and `name`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Team name modified."
          }
        },
        "tags": [
          "teams"
        ]
      },
      "delete": {
        "operationId": "TeamHttpController_deleteTeam",
        "summary": "Deletes a team.",
        "description": "Request must include `teamId`. Owner access required for successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team deleted."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users": {
      "post": {
        "operationId": "TeamHttpController_inviteUserToTeam",
        "summary": "Invite a new user to the team.",
        "description": "Request must include `teamId`, email and `firstName`. Admin access required for a successful request.</br></br>Response should include new user's `name`, `id`, `role`, `status`, `email`, and `lastLogin`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "User invited.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}/role": {
      "put": {
        "operationId": "TeamHttpController_updateUserRoleInTeam",
        "summary": "Edit user role.",
        "description": "Promotes or demotes the user. Request must include `teamId`, `userId` and `role`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User's role modified."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}": {
      "delete": {
        "operationId": "TeamHttpController_deleteUserFromTeam",
        "summary": "Remove a user from the team.",
        "description": "Removes the user from the team. Request must include `teamId`, `userId`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User removed from a team."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}/reinvite": {
      "post": {
        "operationId": "TeamHttpController_reinviteUser",
        "summary": "Reinvite user with a pending invite status to a team.",
        "description": "This call sends a new invitation link to a user who hasn't accepted invitation to a team.</br></br>Request must include `teamId`, `userId`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "New invite link sent."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/users/me": {
      "post": {
        "operationId": "UserHttpController_getUserMeta",
        "summary": "Fetch the current user.",
        "description": "Response includes the `user`, `activeTeamId`, `teams`, and `invitations`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Fetch the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMetaDto"
                }
              }
            }
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/users/me/active-team": {
      "post": {
        "operationId": "UserHttpController_activateTeam",
        "summary": "Sets the active team.",
        "description": "Request must include `teamID`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivateTeamDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Set the active team."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/users/me/invitations/{teamId}": {
      "post": {
        "operationId": "UserHttpController_acceptTeamInvitation",
        "summary": "Accept invitation to a team.",
        "description": "Request must include `teamID`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation accepted."
          }
        },
        "tags": [
          "users/me"
        ]
      },
      "delete": {
        "operationId": "UserHttpController_declineTeamInvitation",
        "summary": "Decline invitation to a team.",
        "description": "Request must include `teamID`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation declined."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/users/me/preferences/onboarding": {
      "put": {
        "operationId": "UserHttpController_enableOnboardingTips",
        "summary": "Sets the onboarding tips to visible for the user.",
        "description": "Enable onboarding tips.",
        "parameters": [
          
        ],
        "responses": {
          "204": {
            "description": "Enabled."
          }
        },
        "tags": [
          "users/me"
        ]
      },
      "delete": {
        "operationId": "UserHttpController_disableOnboardingTips",
        "summary": "Sets the onboarding tips to hidden for the user.",
        "description": "Disable onboarding tips.",
        "parameters": [
          
        ],
        "responses": {
          "204": {
            "description": "Disabled."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/deployments": {
      "get": {
        "operationId": "DeployHttpController_getDeployments",
        "summary": "Fetch the list of deployments.",
        "description": "Get the list of deployments. A deployment should include `id`, `prefix`, `status`, `note`, `audit` log details, project `name`, `id`, `type`, version `name`, `type`, `id`, and node `name`, `id`, `type`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of deployments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "post": {
        "operationId": "DeployHttpController_createDeployment",
        "summary": "Create new deployment.",
        "description": "Request must include `versionId`, `nodeId`, and `prefix`, which refers to the ID of a version, a node and the prefix of the deployment. Response should include deployment `id`, `prefix`, `status`, `note`, and `audit` log details, as well as project `type`, `id`, `name`, version `type`, `id`, `name`, and node `type`, `id`, `name`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New deployment created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}": {
      "get": {
        "operationId": "DeployHttpController_getDeploymentDetails",
        "summary": "Retrieve details of a deployment.",
        "description": "Get details of a certain deployment. Request must include `deploymentId`. Deployment details should include `id`, `prefix`, `environment`, `status`, `note`, `audit` log details, project `name`, `id`, `type`, version `name`, `type`, `id`, and node `name`, `id`, `type`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a deployment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "patch": {
        "operationId": "DeployHttpController_patchDeployment",
        "summary": "Update deployment.",
        "description": "Request must include `deploymentId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Deployment modified."
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "delete": {
        "operationId": "DeployHttpController_deleteDeployment",
        "summary": "Delete deployment.",
        "description": "Request must include `deploymentId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment deleted."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/instances/{instanceId}": {
      "get": {
        "operationId": "DeployHttpController_getInstance",
        "summary": "Get details of a soon-to-be container.",
        "description": "Request must include `deploymentId` and `instanceId`, which refer to the ID of a deployment and the instance. Instances are the manifestation of an image in the deployment. Response should include `state`, `id`, `updatedAt`, and `image` details including `id`, `name`, `tag`, `order` and `config` variables.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of an instance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "patch": {
        "operationId": "DeployHttpController_patchInstance",
        "summary": "Update instance configuration.",
        "description": "Request must include `deploymentId` and `instanceId` and portion of the instance configuration as `config`. Response should include `config` variables in an array.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchInstanceDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Instance configuration updated."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/instances/{instanceId}/secrets": {
      "get": {
        "operationId": "DeployHttpController_getDeploymentSecrets",
        "summary": "Fetch secrets of a soon-to-be container.",
        "description": "Request must include `deploymentId` and `instanceId`, which refers to the ID of a deployment and the instance. Response should include container `prefix` and `name`, and `publicKey`, `keys`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secrets of an instance listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceSecretsDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/start": {
      "post": {
        "operationId": "DeployHttpController_startDeployment",
        "summary": "Start the deployment process.",
        "description": "Request must include `deploymentId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment initiated."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/copy": {
      "post": {
        "operationId": "DeployHttpController_copyDeployment",
        "summary": "Copy deployment.",
        "description": "Request must include `deploymentId` and `force`, which is when true will overwrite the existing preparing deployment. Response should include deployment data: `id`, `prefix`, `status`, `note`, and miscellaneous details of `audit` log, `project`, `version`, and `node`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Deployment copied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/deployments/{deploymentId}/log": {
      "get": {
        "operationId": "DeployHttpController_deploymentLog",
        "summary": "Fetch event log of a deployment.",
        "description": "Request must include `deploymentId`. Response should include an `items` array with objects of `type`, `deploymentStatus`, `createdAt`, `log`, and `containerState` which consists of `state` and `instanceId`.",
        "parameters": [
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "try",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment event log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentLogListDto"
                }
              }
            }
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/tokens": {
      "get": {
        "operationId": "TokenHttpController_getTokens",
        "summary": "List of tokens.",
        "description": "Access token's support is to provide secure access to the HTTP api without a cookie.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Token list fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "tokens"
        ]
      },
      "post": {
        "operationId": "TokenHttpController_generateToken",
        "summary": "Create access token.",
        "description": "Request must include `name` and `expirationInDays`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "description": "Token created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedTokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/api/tokens/{tokenId}": {
      "get": {
        "operationId": "TokenHttpController_getToken",
        "summary": "Fetch token details.",
        "description": "Access token's details are `name`, `id`, and the time of creation and expiration. Request must include `tokenId`.",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token details listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDto"
                }
              }
            }
          }
        },
        "tags": [
          "tokens"
        ]
      },
      "delete": {
        "operationId": "TokenHttpController_deleteToken",
        "summary": "Delete an access token.",
        "description": "Request must include `tokenId`.",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete token."
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/api/nodes": {
      "get": {
        "operationId": "NodeHttpController_getNodes",
        "summary": "Get data of nodes that belong to your team.",
        "description": "Fetch data of deployment targets. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, and `name`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Data of nodes listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "post": {
        "operationId": "NodeHttpController_createNode",
        "summary": "Create new node.",
        "description": "Request must include the node's `name`. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, and `name`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New node created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDto"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}": {
      "get": {
        "operationId": "NodeHttpController_getNodeDetails",
        "summary": "Get data of nodes that belong to your team.",
        "description": "Fetch data of a specific node. Request must include `nodeId`. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, `name`, `hasToken`, and agent installation details.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of the node.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "put": {
        "operationId": "NodeHttpController_updateNode",
        "summary": "Update details of a node.",
        "description": "Request must include the node's `name`, body can include `description` and `icon`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNodeDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Node details modified."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "NodeHttpController_deleteNode",
        "summary": "Delete node.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Node deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/script": {
      "post": {
        "operationId": "NodeHttpController_generateScript",
        "summary": "Create agent install script.",
        "description": "Request must include `nodeId`, `type` and `scriptType`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeGenerateScriptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Install script generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeInstallDto"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "NodeHttpController_discardScript",
        "summary": "Delete node set up install script.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Agent install script deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "get": {
        "operationId": "NodeHttpController_getScript",
        "summary": "Fetch install script.",
        "description": "Request must include `nodeId`. Response should include `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, `name`, `hasToken`, and `install` details.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/token": {
      "delete": {
        "operationId": "NodeHttpController_revokeToken",
        "summary": "Revoke the node's access token.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Token revoked."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/update": {
      "post": {
        "operationId": "NodeHttpController_updateNodeAgent",
        "summary": "Update node's data.",
        "description": "Request must include `nodeId`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Node details modified."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/audit": {
      "get": {
        "operationId": "NodeHttpController_getAuditLog",
        "summary": "Fetch audit log.",
        "description": "Request must include `skip`, `take`, and dates of `from` and `to`. Response should include an array of `items`: `createdAt` date, `event`, and `data`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of the Audit log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeAuditLogListDto"
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}/start": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_startContainer",
        "summary": "Start a container deployed with dyrector.io on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container started."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}/stop": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_stopContainer",
        "summary": "Stop a container deployed with dyrector.io on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container stopped."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}/restart": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_restartContainer",
        "summary": "Restart a container deployed with dyrector.io on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container restarted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers": {
      "delete": {
        "operationId": "NodePrefixContainerHttpController_deleteAllContainers",
        "summary": "Delete containers deployed with dyrector.io, with the specified prefix on a node.",
        "description": "Request must include `nodeId`, and `prefix`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Containers deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/{prefix}/containers/{name}": {
      "delete": {
        "operationId": "NodePrefixContainerHttpController_deleteContainer",
        "summary": "Delete a container deployed with dyrector.io, with the specified prefix and name on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers": {
      "get": {
        "operationId": "NodeGlobalContainerHttpController_getContainers",
        "summary": "Fetch data of all containers on a node.",
        "description": "Request must include `nodeId` and `prefix`. Response should include `id`, `command`, `createdAt`, `state`, `status`, `imageName`, `imageTag` and `ports` of images.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch data of containers running on a node.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}/start": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_startContainer",
        "summary": "Start the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container started."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}/stop": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_stopContainer",
        "summary": "Stop the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container stopped."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}/restart": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_restartContainer",
        "summary": "Restart the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container restarted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/nodes/{nodeId}/containers/{name}": {
      "delete": {
        "operationId": "NodeGlobalContainerHttpController_deleteContainer",
        "summary": "Delete the specific container from a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container deleted."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/audit-log": {
      "get": {
        "operationId": "AuditController_getAuditLog",
        "summary": "Fetch audit log.",
        "description": "Request must include `skip`, `take`, and dates of `from` and `to`. Response should include an array of `items`: `createdAt` date, `userId`, `email`, `serviceCall`, and `data`.",
        "parameters": [
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of the Audit log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogListDto"
                }
              }
            }
          }
        },
        "tags": [
          "audit-log"
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "HealthHttpController_getHealth",
        "summary": "Return service status of the platform.",
        "description": "Response should include `status`, `version` of the platform and `lastMigration` of database.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Service status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthDto"
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/notifications": {
      "get": {
        "operationId": "NotificationHttpController_getNotifications",
        "summary": "Retrieve notifications that belong to a team.",
        "description": "Response should include `type`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Notifications listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "post": {
        "operationId": "NotificationHttpController_createNotification",
        "summary": "Create a new notification.",
        "description": "Request must include `type`, `enabledEvents`, `id`, `name`, `url`, and `active`. Response should list `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New notification created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/{notificationId}": {
      "get": {
        "operationId": "NotificationHttpController_getNotificationDetails",
        "summary": "Fetch details of a notification.",
        "description": "Request must include `notificationId` parameter. Response should include `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of notification listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "put": {
        "operationId": "NotificationHttpController_updateNotification",
        "summary": "Modify a notification.",
        "description": "Request must include `notificationId`, `type`, `enabledEvents`, `id`, `name`, `url`, and `active`. Response should include `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification modified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "delete": {
        "operationId": "NotificationHttpController_deleteNotification",
        "summary": "Delete a notification.",
        "description": "Request must include `notificationId`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notification deleted."
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/notifications/{notificationId}/test": {
      "post": {
        "operationId": "NotificationHttpController_testNotification",
        "summary": "Send a test message.",
        "description": "Request must include `notificationId`.",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Test message sent."
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/templates": {
      "get": {
        "operationId": "TemplateHttpController_getTemplates",
        "summary": "Return list of templates on the platform.",
        "description": "Response should include `id`, `name`, `description` and `technologies` of templates.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Templates listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "templates"
        ]
      },
      "post": {
        "operationId": "TemplateHttpController_createProject",
        "summary": "Creates a new project from the selected template.",
        "description": "Request must include `type`, `id`, and `name`. Response should include `id`, `name`, `description`, `type`, and `audit` log details of templates.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectFromTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New project created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          }
        },
        "tags": [
          "templates"
        ]
      }
    },
    "/api/templates/{templateId}/image": {
      "get": {
        "operationId": "TemplateHttpController_getImage",
        "summary": "Retrieves the picture of the template",
        "description": "Request must include `templateId`.",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve data of an image of a template."
          }
        },
        "tags": [
          "templates"
        ]
      }
    },
    "/api/dashboard": {
      "get": {
        "operationId": "DashboardHttpController_getDashboard",
        "summary": "Fetch dashboard data of latest activities.",
        "description": "Response should include `users`, number of `auditLogEntries`, `projects`, `versions`, `deployments`, `failedDeployments`, details of `nodes`, `latestDeployments` and `auditLog` entries.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Dashboard data listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardDto"
                }
              }
            }
          }
        },
        "tags": [
          "dashboard"
        ]
      }
    },
    "/api/storages": {
      "get": {
        "operationId": "StorageHttpController_getStorages",
        "summary": "Fetch the list of storages.",
        "description": "Response should include `description`, `icon`, `url`, `id`, and `name`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of storages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      },
      "post": {
        "operationId": "StorageHttpController_createStorage",
        "summary": "Create a new storage.",
        "description": "Creates a new storage. Request must include `name`, and `url`. Request body may include `description`, `icon`, `accesKey`, and `secretKey`. Response should include `description`, `icon`, `url`, `id`, `name`, `accessKey`, `secretKey`, and `inUse`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStorageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New storage created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/storages/options": {
      "get": {
        "operationId": "StorageHttpController_getStorageOptions",
        "summary": "Fetch the name and ID of available storage options.",
        "description": "Response should include `id`, and `name`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Name and ID of storage options listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageOptionDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/storages/{storageId}": {
      "get": {
        "operationId": "StorageHttpController_getStorageDetails",
        "summary": "Return details of a storage.",
        "description": "Get the details of a storage. Request must include `storageId`. Response should include description, icon, url, `id`, `name`, `accessKey`, `secretKey`, and `inUse`.",
        "parameters": [
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Storage details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDetailsDto"
                }
              }
            }
          }
        },
        "tags": [
          "storages"
        ]
      },
      "put": {
        "operationId": "StorageHttpController_updateStorage",
        "summary": "Modify a storage.",
        "description": "Updates a storage. Request must include `storageId`, `name`, and `url`. Request body may include `description`, `icon`, `accesKey`, and `secretKey`.",
        "parameters": [
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStorageDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Storage updated."
          }
        },
        "tags": [
          "storages"
        ]
      },
      "delete": {
        "operationId": "StorageHttpController_deleteStorage",
        "summary": "Delete a storage from dyrector.io.",
        "description": "Deletes a storage Request must include `storageId`.",
        "parameters": [
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Storage deleted."
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/metrics": {
      "get": {
        "operationId": "MetricsController_index",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Prometheus metrics",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "tags": [
          "metrics"
        ]
      }
    }
  },
  "info": {
    "title": "dyrector.io platform API",
    "description": "The dyrector.io platform API documentation.",
    "version": "0.5.1-03572d7",
    "contact": {
      
    }
  },
  "tags": [
    {
      "name": "projects",
      "description": "There are two kinds of projects in dyrector.io: Versionless and Versioned. Versionless projects make up one deployable unit without versioning, while Versioned projects come with multiple rolling or incremental versions. More details in dyrector.io platform [documentation](https://docs.dyrector.io/tutorials/create-your-project)."
    },
    {
      "name": "versions",
      "description": "Versions belong to projects. While Versionless Projects seemingly do not have a version, they act as a rolling version of a Versioned Project.</br></br>The purpose of versions is to separate different variations of your project. They can be either rolling or incremental. One Versioned Project can have multiple versions of both types. More details about rolling and incremental versions in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#project)."
    },
    {
      "name": "version/images",
      "description": "Images make up a Versioned Project's version, or a Versionless Project."
    },
    {
      "name": "registries",
      "description": "Registries are 3rd party registries where the images of versions are located. Learn more about registries in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#registry)."
    },
    {
      "name": "teams",
      "description": "Teams are the shared entity of multiple users. The purpose of teams is to separate users, nodes and projects based on their needs within an organization. Team owners can assign roles. More details about teams in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#team)."
    },
    {
      "name": "users/me",
      "description": "users/me cover endpoints related to your user profile."
    },
    {
      "name": "deployments",
      "description": "Deployments are the process that gets the installation of your versions or Versionless Projects done on the node of your choice. More details about deployments in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#deployment)."
    },
    {
      "name": "tokens",
      "description": "Tokens are the access tokens that grant you access to a user profile and the teams the profile is a member of."
    },
    {
      "name": "nodes",
      "description": "Nodes are the deployment targets. Nodes are registered by installing at least one of the agents - crane for Kubernetes, dagent for Docker. These agents connect the platform to your node. One team can have as many nodes as they like.</br></br>Node installation takes place with Shell or PowerShell scripts, which can be created or revoked. More details in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#node)."
    },
    {
      "name": "audit-log",
      "description": "Audit log is a log of team activity generated by the platform."
    },
    {
      "name": "health",
      "description": "Health refers to the status of the different services that make up the platform. It can be checked to see if the platform works properly."
    },
    {
      "name": "notifications",
      "description": "Notifications are chat notifications in Slack, Discord, and Teams. They send an automated message about deployments, new versions, new nodes, and new users. More details in dyrector.io platform [documentation](https://docs.dyrector.io/tutorials/create-chat-notifications)."
    },
    {
      "name": "templates",
      "description": "Templates are preset applications that can be turned into a project right away. They can be deployed with minimal configuration. More details about templates in dyrector.io platform [documentation](https://docs.dyrector.io/features/templates)."
    },
    {
      "name": "dashboard",
      "description": "Dashboard summarizes the latest activities of a team."
    },
    {
      "name": "storages",
      "description": "Storages are S3 compatible memory storages. They can be used for file injection. More details in dyrector.io platform [documentation](https://docs.dyrector.io/features/storage)."
    }
  ],
  "servers": [
    
  ],
  "components": {
    "securitySchemes": {
      "jwt": {
        "scheme": "bearer",
        "bearerFormat": "Bearer",
        "type": "http",
        "description": "Please enter token in following format: "
      }
    },
    "schemas": {
      "ProjectListItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "description"
        ]
      },
      "ProjectDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "description"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "VersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "VersionDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "CreateVersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "UpdateVersionDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "IncreaseVersionDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "ImageDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "AddImagesDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "PatchImageDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "RegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "v2",
              "hub",
              "gitlab",
              "github",
              "google",
              "unchecked"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "HubRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "imageNamePrefix": {
            "type": "string"
          }
        },
        "required": [
          "imageNamePrefix"
        ]
      },
      "V2RegistryDetailsDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "GitlabRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          }
        },
        "required": [
          "namespace"
        ]
      },
      "GithubRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "enum": [
              "organization",
              "user"
            ]
          }
        },
        "required": [
          "namespace"
        ]
      },
      "GoogleRegistryDetailsDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "UncheckedRegistryDetailsDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "RegistryDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          }
        },
        "required": [
          "type",
          "details"
        ]
      },
      "CreateRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          }
        },
        "required": [
          "type",
          "details"
        ]
      },
      "UpdateRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          }
        },
        "required": [
          "type",
          "details"
        ]
      },
      "TeamDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "TeamDetailsDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "CreateTeamDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "UpdateTeamDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "InviteUserDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "expired",
              "declined"
            ]
          }
        },
        "required": [
          "role",
          "status"
        ]
      },
      "UpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user"
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "UserMetaDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "ActivateTeamDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "DeploymentDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "DeploymentDetailsDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          }
        },
        "required": [
          "status"
        ]
      },
      "InstanceDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "InstanceSecretsDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "CreateDeploymentDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "PatchDeploymentDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "PatchInstanceDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "CopyDeploymentDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "DeploymentLogListDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "GenerateTokenDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "GeneratedTokenDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "NodeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected",
              "outdated"
            ]
          }
        },
        "required": [
          "type",
          "status"
        ]
      },
      "NodeDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected",
              "outdated"
            ]
          }
        },
        "required": [
          "type",
          "status"
        ]
      },
      "CreateNodeDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "UpdateNodeDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "NodeGenerateScriptDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "scriptType": {
            "type": "string",
            "enum": [
              "shell",
              "powershell"
            ]
          }
        },
        "required": [
          "type",
          "scriptType"
        ]
      },
      "NodeInstallDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "NodeAuditLogListDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "ContainerDto": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "running",
              "waiting",
              "exited"
            ]
          }
        },
        "required": [
          "state"
        ]
      },
      "AuditLogListDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "HealthDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "NotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "NotificationDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          }
        },
        "required": [
          "type",
          "enabledEvents"
        ]
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          }
        },
        "required": [
          "type",
          "enabledEvents"
        ]
      },
      "UpdateNotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          }
        },
        "required": [
          "type",
          "enabledEvents"
        ]
      },
      "TemplateDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "CreateProjectFromTemplateDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ProjectDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "description"
        ]
      },
      "DashboardDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "StorageDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "StorageOptionDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "StorageDetailsDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "CreateStorageDto": {
        "type": "object",
        "properties": {
          
        }
      },
      "UpdateStorageDto": {
        "type": "object",
        "properties": {
          
        }
      }
    }
  }
}