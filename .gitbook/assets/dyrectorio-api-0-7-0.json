{
  "openapi": "3.0.0",
  "paths": {
    "/api/{teamSlug}/projects": {
      "get": {
        "operationId": "ProjectHttpController_getProjects",
        "summary": "Fetch the projects list.",
        "description": "Returns a list of a team's projects and their details. `teamSlug` needs to be included in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectListItemDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for projects."
          }
        },
        "tags": [
          "projects"
        ]
      },
      "post": {
        "operationId": "ProjectHttpController_createProject",
        "summary": "Create a new project for a team.",
        "description": "Create a new project for a team. `teamSlug` needs to be included in URL. Newly created team has a `type` and a `name` as required variables, and optionally a `description` and a `changelog`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New project created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectListItemDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for project creation."
          },
          "403": {
            "description": "Unauthorized request for project creation."
          },
          "409": {
            "description": "Project name taken."
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}": {
      "get": {
        "operationId": "ProjectHttpController_getProjectDetails",
        "summary": "Fetch details of a project.",
        "description": "Returns a project's details. `teamSlug` and `ProjectID` needs to be included in URL. The response should contain an array, consisting of the project's `name`, `id`, `type`, `description`, `deletability`, versions and version related data, including version `name` and `id`, `changelog`, increasibility.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for project details."
          },
          "403": {
            "description": "Unauthorized request for project details."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "tags": [
          "projects"
        ]
      },
      "put": {
        "operationId": "ProjectHttpController_updateProject",
        "summary": "Update a project.",
        "description": "Updates a project. `teamSlug` is required in URL, as well as `projectId` to identify which project is modified, `name`, `description` and `changelog` can be adjusted with this call.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Project details are modified."
          },
          "400": {
            "description": "Bad request for project details modification."
          },
          "403": {
            "description": "Unauthorized request for project details modification."
          },
          "404": {
            "description": "Project not found."
          },
          "409": {
            "description": "Project name taken."
          }
        },
        "tags": [
          "projects"
        ]
      },
      "delete": {
        "operationId": "ProjectHttpController_deleteProject",
        "summary": "Delete a project.",
        "description": "Deletes a project with the specified `projectId`. `teamSlug` and `ProjectID` are required in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted."
          },
          "403": {
            "description": "Unauthorized request for a project."
          },
          "404": {
            "description": "Project not found."
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/convert": {
      "post": {
        "operationId": "ProjectHttpController_convertProject",
        "summary": "Convert a project to versioned.",
        "description": "Converts a project to versioned with the specified `projectId`. `teamSlug` and `ProjectID` are required in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project converted."
          },
          "400": {
            "description": "Bad request for project conversion."
          },
          "403": {
            "description": "Unauthorized request for project conversion."
          }
        },
        "tags": [
          "projects"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/versions": {
      "get": {
        "operationId": "VersionHttpController_getVersions",
        "summary": "Fetch the list of all the versions under a project.",
        "description": "Returns an array containing the every version that belong to a project. `teamSlug` and `ProjectId` must be included in URL. `ProjectId` refers to the project's ID. Details include the version's `name`, `id`, `type`, `audit` log details, `changelog`, and increasibility.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nameContains",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns an array with every versions of a project.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VersionDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for project versions."
          }
        },
        "tags": [
          "versions"
        ]
      },
      "post": {
        "operationId": "VersionHttpController_createVersion",
        "summary": "Create a new version.",
        "description": "Creates a new version in a project. `projectId` refers to the project's ID. `teamSlug` and `ProjectId` must be included in URL, request's body need to include `name` and `type` of the version, `changelog` is optionable. Response should include the `name`, `id`, `changelog`, increasibility, `type`, and `audit` log details of the version.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for version creation."
          },
          "403": {
            "description": "Unauthorized request for version creation."
          },
          "409": {
            "description": "Version name taken."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/versions/{versionId}": {
      "get": {
        "operationId": "VersionHttpController_getVersion",
        "summary": "Retrieve the details of a version of a project.",
        "description": "Returns the details of a version in the project. `teamSlug` and `ProjectId` must be included in URL. `projectId` refers to the project's ID, `versionId` refers to the version's ID. Details include the version's `name`, `id`, `type`, `audit` log details, `changelog`, increasibility, mutability, deletability, and all image related data, including `name`, `id`, `tag`, `order` and configuration data of the images.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a version under a project is fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for version details."
          },
          "403": {
            "description": "Unauthorized request for version details."
          },
          "404": {
            "description": "Version not found."
          }
        },
        "tags": [
          "versions"
        ]
      },
      "put": {
        "operationId": "VersionHttpController_updateVersion",
        "summary": "Modify version.",
        "description": "Updates a version's `name` and `changelog`. `teamSlug`, `ProjectId` and `VersionId` must be included in URL. `projectId` refers to the project's ID, `versionId` refers to the version's ID.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVersionDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Changelog of a version is updated."
          },
          "400": {
            "description": "Bad request for version modification."
          },
          "403": {
            "description": "Unauthorized request for version modification."
          },
          "404": {
            "description": "Version not found."
          },
          "409": {
            "description": "Version name taken."
          }
        },
        "tags": [
          "versions"
        ]
      },
      "delete": {
        "operationId": "VersionHttpController_deleteVersion",
        "summary": "Delete a version.",
        "description": "This call deletes a version.  `teamSlug`, `ProjectId` and `VersionId` must be included in URL. `projectId` refers to the project's ID, `versionId` refers to the version's ID.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Version deleted."
          },
          "403": {
            "description": "Unauthorized request for version delete."
          },
          "404": {
            "description": "Version not found."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/versions/{versionId}/default": {
      "put": {
        "operationId": "VersionHttpController_setDefaultVersion",
        "summary": "Turn version into a default one of the versioned project other versions under it will inherit images and deployments from.",
        "description": "This call turns a version into the default one, resulting other versions within this project later inherit images, deployments and their configurations from it.  `teamSlug`, `ProjectId` and `VersionId` must be included in URL. `projectId` refers to the project's ID, `versionId` refers to the version's ID.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Version turned into default."
          },
          "400": {
            "description": "Bad request."
          },
          "403": {
            "description": "Unauthorized request for setting version as default."
          },
          "404": {
            "description": "Version not found."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/versions/{versionId}/increase": {
      "post": {
        "operationId": "VersionHttpController_increaseVersion",
        "summary": "Increase a the version of a versioned project with a new version.",
        "description": "Increases the version of a project with a new child version. `teamSlug`, `ProjectId` and `VersionId` must be included in URL. `projectId` refers to the project's ID, `versionId` refers to the version's ID. `name` refers to the name of the new version, and is required in the body.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IncreaseVersionDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New version created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for increasing version."
          },
          "403": {
            "description": "Unauthorized request for increasing version."
          }
        },
        "tags": [
          "versions"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/versions/{versionId}/images": {
      "get": {
        "operationId": "ImageHttpController_getImagesByVersionId",
        "summary": "Fetch data of all images of a version.",
        "description": "Fetch details of images within a version. `ProjectId` refers to the project's ID, `versionId` refers to the version's ID. Both, and `teamSlug` are required in the URL.</br></br>Details come in an array, including `name`, `id`, `tag`, `order`, and config details of the image.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of images listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for images."
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "post": {
        "operationId": "ImageHttpController_addImagesToVersion",
        "summary": "Add images to a version.",
        "description": "Add new images to a version. `projectId` refers to the project's ID, `versionId` refers to the version's ID. These, and `teamSlug` are required in the URL. `registryId` refers to the registry's ID, `images` refers to the name(s) of the images you'd like to add. These are required variables in the body.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AddImagesDto"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New image added.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImageDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request for images."
          },
          "403": {
            "description": "Unauthorized request for images."
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/versions/{versionId}/images/{imageId}": {
      "get": {
        "operationId": "ImageHttpController_getImageDetails",
        "summary": "Fetch data of an image of a version.",
        "description": "Fetch details of an image within a version. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All, and `teamSlug` are required in the URL.</br></br>Image details consists `name`, `id`, `tag`, `order`, and the config of the image.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of an image.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for image details."
          },
          "403": {
            "description": "Unauthorized request for image details."
          },
          "404": {
            "description": "Image not found."
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "patch": {
        "operationId": "ImageHttpController_patchImage",
        "summary": "Configure an image of a version.",
        "description": "Modify the configuration variables of an image. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All, and `teamSlug` are required in the URL. `Tag` refers to the version of the image, `config` is an object of configuration variables.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchImageDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Image's configure variables updated."
          },
          "400": {
            "description": "Bad request for an image."
          },
          "403": {
            "description": "Unauthorized request for an image."
          },
          "404": {
            "description": "Image not found."
          }
        },
        "tags": [
          "version/images"
        ]
      },
      "delete": {
        "operationId": "ImageHttpController_deleteImage",
        "summary": "Delete an image from a version.",
        "description": "Delete an image. `projectId` refers to the project's ID, `versionId` refers to the version's ID, `imageId` refers to the image's ID. All, and `teamSlug` are required in the URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete an image from a version."
          },
          "403": {
            "description": "Unauthorized request for an image."
          },
          "404": {
            "description": "Image not found."
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/{teamSlug}/projects/{projectId}/versions/{versionId}/images/order": {
      "put": {
        "operationId": "ImageHttpController_orderImages",
        "summary": "Edit image deployment order of a version.",
        "description": "Edit image deployment order of a version. `projectId` refers to the project's ID, `versionId` refers to the version's ID. Both, and `teamSlug` are required in the URL. Request body should include the IDs of the images in an array.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "projectId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "versionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Image order modified."
          },
          "400": {
            "description": "Bad request for ordering."
          },
          "403": {
            "description": "Unauthorized request for ordering."
          }
        },
        "tags": [
          "version/images"
        ]
      }
    },
    "/api/{teamSlug}/registries": {
      "get": {
        "operationId": "RegistryHttpController_getRegistries",
        "summary": "Fetch data of registries.",
        "description": "Lists every registries available in the active team. Request must include `teamSlug` in URL. Response is an array including the `name`, `id`, `type`, `description`, and `icon` of the registry.</br></br>Registries are 3rd party registries where the container images are stored.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of all registries within a team listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistryDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for registries."
          }
        },
        "tags": [
          "registries"
        ]
      },
      "post": {
        "operationId": "RegistryHttpController_createRegistry",
        "summary": "Create a new registry.",
        "description": "To add a new registry, include `teamSlug` in URL, body must include `name`, `type`, `description`, `details`, and `icon`. `Type`, `details`, and `name` are required. Response is an array including the `name`, `id`, `type`, `description`, `imageNamePrefix`, `inUse`, `icon`, and audit log info of the registry.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRegistryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "New registry created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for registry creation."
          },
          "403": {
            "description": "Unauthorized request for registry creation."
          },
          "409": {
            "description": "Registry name taken."
          }
        },
        "tags": [
          "registries"
        ]
      }
    },
    "/api/{teamSlug}/registries/{registryId}": {
      "get": {
        "operationId": "RegistryHttpController_getRegistry",
        "summary": "Fetch data of a registry.",
        "description": "Lists the details of a registry. Request must include `teamSlug` and `RegistryID` in URL. `registryId` refers to the registry's ID. Response is an array including the `name`, `id`, `type`, `description`, `imageNamePrefix`, `inUse`, `icon`, and audit log info of the registry.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of a registry listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for a registry."
          },
          "403": {
            "description": "Unauthorized request for a registry."
          },
          "404": {
            "description": "Registry not found."
          }
        },
        "tags": [
          "registries"
        ]
      },
      "put": {
        "operationId": "RegistryHttpController_updateRegistry",
        "summary": "Modify the details of a registry.",
        "description": "Modify the `name`, `type`, `description`, `details`, and `icon`. `RegistryId` refers to the registry's ID. `teamSlug` and `RegistryID` is required in URL, body must include `type`, `details`, and `name`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRegistryDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Registry modified."
          },
          "400": {
            "description": "Bad request for registry modification."
          },
          "403": {
            "description": "Unauthorized request for registry modification."
          },
          "404": {
            "description": "Registry not found."
          },
          "409": {
            "description": "Registry name taken."
          }
        },
        "tags": [
          "registries"
        ]
      },
      "delete": {
        "operationId": "RegistryHttpController_deleteRegistry",
        "summary": "Delete a registry from dyrector.io.",
        "description": "Deletes a registry with the specified `registryId`. `teamSlug` and `RegistryID` are required in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "registryId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Registry deleted."
          },
          "403": {
            "description": "Unauthorized request for registry delete."
          },
          "404": {
            "description": "Registry not found."
          }
        },
        "tags": [
          "registries"
        ]
      }
    },
    "/api/teams": {
      "get": {
        "operationId": "TeamHttpController_getTeams",
        "summary": "Fetch data of teams the user is a member of.",
        "description": "List of teams consist of `name`, `id`, and `statistics`, including number of `users`, `projects`, `nodes`, `versions`, and `deployments`.</br></br>Teams are the shared entity of multiple users. The purpose of teams is to separate users, nodes and projects based on their needs within an organization. Team owners can assign roles. More details about teams here.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "List of teams and their statistics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for teams."
          }
        },
        "tags": [
          "teams"
        ]
      },
      "post": {
        "operationId": "TeamHttpController_createTeam",
        "summary": "Create new team.",
        "description": "Request must include `name`, which is going to be the name of the newly made team. Response should include `name`, `id`, and `statistics`, including number of `users`, `projects`, `nodes`, `versions`, and `deployments`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "New team created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for team creation."
          },
          "403": {
            "description": "Unauthorized request for team creation."
          },
          "409": {
            "description": "Team name taken."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}": {
      "get": {
        "operationId": "TeamHttpController_getTeamById",
        "summary": "Fetch data of a team the user is a member of.",
        "description": "Get the details of a team. Request must include `teamId`, which is the ID of the team they'd like to get the data of. Data of teams consist of `name`, `id`, and `statistics`, including number of `users`, `projects`, `nodes`, `versions`, and `deployments`. Response should include user details, as well, including `name`, `id`, `role`, `status`, `email`, and `lastLogin`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the team.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for team details."
          },
          "403": {
            "description": "Unauthorized request for team details."
          },
          "404": {
            "description": "Team not found."
          }
        },
        "tags": [
          "teams"
        ]
      },
      "put": {
        "operationId": "TeamHttpController_updateTeam",
        "summary": "Modify a team's name.",
        "description": "Request must include `teamId` and `name`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTeamDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Team name modified."
          },
          "400": {
            "description": "Bad request for team modification."
          },
          "403": {
            "description": "Unauthorized request for team modification."
          },
          "404": {
            "description": "Team not found."
          },
          "409": {
            "description": "Team name taken."
          }
        },
        "tags": [
          "teams"
        ]
      },
      "delete": {
        "operationId": "TeamHttpController_deleteTeam",
        "summary": "Deletes a team.",
        "description": "Request must include `teamId`. Owner access required for successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Team deleted."
          },
          "403": {
            "description": "Unauthorized request for team delete."
          },
          "404": {
            "description": "Team not found."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users": {
      "post": {
        "operationId": "TeamHttpController_inviteUserToTeam",
        "summary": "Invite a new user to the team.",
        "description": "Request must include `teamId`, email and `firstName`. Admin access required for a successful request.</br></br>Response should include new user's `name`, `id`, `role`, `status`, `email`, and `lastLogin`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InviteUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "User invited.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for user invitation."
          },
          "403": {
            "description": "Unauthorized request for user invitation."
          },
          "409": {
            "description": "User is already invited to or already in the team."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}/role": {
      "put": {
        "operationId": "TeamHttpController_updateUserRoleInTeam",
        "summary": "Edit user role.",
        "description": "Promotes or demotes the user. Request must include `teamId`, `userId` and `role`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRoleDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User's role modified."
          },
          "400": {
            "description": "Bad request for user role modification."
          },
          "403": {
            "description": "Unauthorized request for user role modification."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/leave": {
      "delete": {
        "operationId": "TeamHttpController_leaveTeam",
        "summary": "Remove the current user from the team.",
        "description": "Removes the current user from the team. Request must include `teamId`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User removed from a team."
          },
          "403": {
            "description": "Unauthorized request for user removal."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}": {
      "delete": {
        "operationId": "TeamHttpController_deleteUserFromTeam",
        "summary": "Remove a user from the team.",
        "description": "Removes the user from the team. Request must include `teamId`, `userId`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User removed from a team."
          },
          "403": {
            "description": "Unauthorized request for user removal."
          },
          "404": {
            "description": "User not found."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/teams/{teamId}/users/{userId}/reinvite": {
      "post": {
        "operationId": "TeamHttpController_reinviteUser",
        "summary": "Reinvite user with a pending invite status to a team.",
        "description": "This call sends a new invitation link to a user who hasn't accepted invitation to a team.</br></br>Request must include `teamId`, `userId`. Admin access required for a successful request.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "New invite link sent."
          },
          "400": {
            "description": "Bad request for reinvitation."
          },
          "403": {
            "description": "Unauthorized request for reinvitation."
          }
        },
        "tags": [
          "teams"
        ]
      }
    },
    "/api/users/me": {
      "post": {
        "operationId": "UserHttpController_getUserMeta",
        "summary": "Fetch the current user.",
        "description": "Response includes the `user`, `teams`, and `invitations`.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Fetch the current user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserMetaDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for current user."
          },
          "403": {
            "description": "Unauthorized request for current user."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/users/me/invitations/{teamId}": {
      "post": {
        "operationId": "UserHttpController_acceptTeamInvitation",
        "summary": "Accept invitation to a team.",
        "description": "Request must include `teamId`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation accepted."
          },
          "400": {
            "description": "Bad request for team invitation."
          },
          "403": {
            "description": "Unauthorized request for team invitation."
          }
        },
        "tags": [
          "users/me"
        ]
      },
      "delete": {
        "operationId": "UserHttpController_declineTeamInvitation",
        "summary": "Decline invitation to a team.",
        "description": "Request must include `teamId`.",
        "parameters": [
          {
            "name": "teamId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invitation declined."
          },
          "403": {
            "description": "Unauthorized request for invite declination."
          },
          "404": {
            "description": "Invitation not found."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/users/me/preferences/onboarding": {
      "put": {
        "operationId": "UserHttpController_enableOnboardingTips",
        "summary": "Sets the onboarding tips to visible for the user.",
        "description": "Enable onboarding tips.",
        "parameters": [
          
        ],
        "responses": {
          "204": {
            "description": "Enabled."
          },
          "403": {
            "description": "Unauthorized request for onboarding tips."
          }
        },
        "tags": [
          "users/me"
        ]
      },
      "delete": {
        "operationId": "UserHttpController_disableOnboardingTips",
        "summary": "Sets the onboarding tips to hidden for the user.",
        "description": "Disable onboarding tips.",
        "parameters": [
          
        ],
        "responses": {
          "204": {
            "description": "Disabled."
          },
          "403": {
            "description": "Unauthorized request for onboarding tips."
          }
        },
        "tags": [
          "users/me"
        ]
      }
    },
    "/api/{teamSlug}/deployments": {
      "get": {
        "operationId": "DeployHttpController_getDeployments",
        "summary": "Fetch the list of deployments.",
        "description": "Get the list of deployments. Request needs to include `teamSlug` in URL. A deployment should include `id`, `prefix`, `status`, `note`, `audit` log details, project `name`, `id`, `type`, version `name`, `type`, `id`, and node `name`, `id`, `type`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of deployments.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeploymentDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for deployments."
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "post": {
        "operationId": "DeployHttpController_createDeployment",
        "summary": "Create new deployment.",
        "description": "Request must include `teamSlug` in URL, `versionId`, `nodeId`, and `prefix`, which refers to the ID of a version, a node and the prefix of the deployment, must be included in body. Response should include deployment `id`, `prefix`, `status`, `note`, and `audit` log details, as well as project `type`, `id`, `name`, version `type`, `id`, `name`, and node `type`, `id`, `name`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New deployment created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for a deployment."
          },
          "403": {
            "description": "Unauthorized request for a deployment."
          },
          "409": {
            "description": "Prefix taken for the node."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/{teamSlug}/deployments/{deploymentId}": {
      "get": {
        "operationId": "DeployHttpController_getDeploymentDetails",
        "summary": "Retrieve details of a deployment.",
        "description": "Get details of a certain deployment. Request must include `teamSlug` and `deploymentId` in URL. Deployment details should include `id`, `prefix`, `environment`, `status`, `note`, `audit` log details, project `name`, `id`, `type`, version `name`, `type`, `id`, and node `name`, `id`, `type`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of a deployment.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for deployment details."
          },
          "403": {
            "description": "Unauthorized request for deployment details."
          },
          "404": {
            "description": "Deployment not found."
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "patch": {
        "operationId": "DeployHttpController_patchDeployment",
        "summary": "Update deployment.",
        "description": "Request must include `deploymentId` and `teamSlug` in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Deployment modified."
          },
          "400": {
            "description": "Bad request for a deployment."
          },
          "403": {
            "description": "Unauthorized request for a deployment."
          },
          "404": {
            "description": "Deployment not found."
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "delete": {
        "operationId": "DeployHttpController_deleteDeployment",
        "summary": "Delete deployment.",
        "description": "Request must include `teamSlug` and `deploymentId` in the URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment deleted."
          },
          "403": {
            "description": "Unauthorized request for a deployment."
          },
          "404": {
            "description": "Deployment not found."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/{teamSlug}/deployments/{deploymentId}/instances/{instanceId}": {
      "get": {
        "operationId": "DeployHttpController_getInstance",
        "summary": "Get details of a soon-to-be container.",
        "description": "Request must include `teamSlug`, `deploymentId` and `instanceId`, which refer to the ID of a deployment and the instance, in the URL. Instances are the manifestation of an image in the deployment. Response should include `state`, `id`, `updatedAt`, and `image` details including `id`, `name`, `tag`, `order` and `config` variables.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of an instance.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for instance details."
          },
          "403": {
            "description": "Unauthorized request for an instance."
          },
          "404": {
            "description": "Instance not found."
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "patch": {
        "operationId": "DeployHttpController_patchInstance",
        "summary": "Update instance configuration.",
        "description": "Request must include `teamSlug`, `deploymentId`, `instanceId` in URL, and portion of the instance configuration as `config` in the body. Response should include `config` variables in an array.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchInstanceDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Instance configuration updated."
          },
          "400": {
            "description": "Bad request for an instance."
          },
          "403": {
            "description": "Unauthorized request for an instance."
          },
          "404": {
            "description": "Instance not found."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/{teamSlug}/deployments/{deploymentId}/instances/{instanceId}/secrets": {
      "get": {
        "operationId": "DeployHttpController_getDeploymentSecrets",
        "summary": "Fetch secrets of a soon-to-be container.",
        "description": "Request must include `teamSlug`, `deploymentId` and `instanceId`, which refer to the ID of a deployment and the instance, needs to be included in URL. Response should include container `prefix` and `name`, and `publicKey`, `keys`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "instanceId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Secrets of an instance listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceSecretsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for instance secrets."
          },
          "403": {
            "description": "Unauthorized request for instance secrets."
          },
          "404": {
            "description": "Instance secrets not found."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/{teamSlug}/deployments/{deploymentId}/start": {
      "post": {
        "operationId": "DeployHttpController_startDeployment",
        "summary": "Start the deployment process.",
        "description": "Request must include `teamSlug` and `deploymentId` in the URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Deployment initiated."
          },
          "400": {
            "description": "Bad request for a deployment."
          },
          "403": {
            "description": "Unauthorized request for a deployment."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/{teamSlug}/deployments/{deploymentId}/copy": {
      "post": {
        "operationId": "DeployHttpController_copyDeployment",
        "summary": "Copy deployment.",
        "description": "Request must include `teamSlug` and `deploymentId` in the URL, which will be copied. The body must include the `nodeId`, `prefix` and optionally a `note`. Response should include deployment data: `id`, `prefix`, `status`, `note`, and miscellaneous details of `audit` log, `project`, `version`, and `node`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CopyDeploymentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Deployment copied.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for a deployment."
          },
          "403": {
            "description": "Unauthorized request for a deployment."
          },
          "409": {
            "description": "Prefix taken for the node."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/{teamSlug}/deployments/{deploymentId}/log": {
      "get": {
        "operationId": "DeployHttpController_deploymentLog",
        "summary": "Fetch event log of a deployment.",
        "description": "Request must include `teamSlug` and `deploymentId` in the URL. Response should include an `items` array with objects of `type`, `deploymentStatus`, `createdAt`, `log`, and `containerState` which consists of `state` and `instanceId`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "try",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Deployment event log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentLogListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for a deployment log."
          },
          "403": {
            "description": "Unauthorized request for a deployment log."
          },
          "404": {
            "description": "Deployment log not found."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/{teamSlug}/deployments/{deploymentId}/token": {
      "put": {
        "operationId": "DeployHttpController_createDeploymentToken",
        "summary": "Create deployment token.",
        "description": "Request must include `teamSlug` and `deploymentId` in the URL. In the body a `name` and optionally the expiration date as `expirationInDays`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDeploymentTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Deployment token with jwt and the curl command.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeploymentTokenCreatedDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for a deployment token."
          },
          "403": {
            "description": "Unauthorized request for a deployment token."
          },
          "409": {
            "description": "Token name taken."
          }
        },
        "tags": [
          "deployments"
        ]
      },
      "delete": {
        "operationId": "DeployHttpController_deleteDeploymentToken",
        "summary": "Delete deployment token.",
        "description": "Request must include `teamSlug` and `deploymentId` in the URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deploymentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Deployment token deleted."
          },
          "403": {
            "description": "Unauthorized request for a deployment token."
          },
          "404": {
            "description": "Deployment token not found."
          }
        },
        "tags": [
          "deployments"
        ]
      }
    },
    "/api/tokens": {
      "get": {
        "operationId": "TokenHttpController_getTokens",
        "summary": "List of tokens.",
        "description": "Access token's support is to provide secure access to the HTTP api without a cookie.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Token list fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TokenDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for tokens."
          }
        },
        "tags": [
          "tokens"
        ]
      },
      "post": {
        "operationId": "TokenHttpController_generateToken",
        "summary": "Create access token.",
        "description": "Request must include `name` and `expirationInDays`.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "description": "Token created.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateTokenDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "headers": {
              "Location": {
                "description": "URL of the created object.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedTokenDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for token creation."
          },
          "403": {
            "description": "Unauthorized request for token creation."
          },
          "409": {
            "description": "Token name taken."
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/api/tokens/{tokenId}": {
      "get": {
        "operationId": "TokenHttpController_getToken",
        "summary": "Fetch token details.",
        "description": "Access token's details are `name`, `id`, and the time of creation and expiration. Request must include `tokenId`.",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token details listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for token details."
          },
          "403": {
            "description": "Unauthorized request for token details."
          },
          "404": {
            "description": "Token not found."
          }
        },
        "tags": [
          "tokens"
        ]
      },
      "delete": {
        "operationId": "TokenHttpController_deleteToken",
        "summary": "Delete an access token.",
        "description": "Request must include `tokenId`.",
        "parameters": [
          {
            "name": "tokenId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Delete token."
          },
          "403": {
            "description": "Unauthorized request for token delete."
          },
          "404": {
            "description": "Token not found."
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/api/{teamSlug}/nodes": {
      "get": {
        "operationId": "NodeHttpController_getNodes",
        "summary": "Get data of nodes that belong to your team.",
        "description": "Fetch data of deployment targets. Request must include `teamSlug` in URL. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, and `name`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of nodes listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NodeDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for nodes."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "post": {
        "operationId": "NodeHttpController_createNode",
        "summary": "Create new node.",
        "description": "Request must include the `teamSlug` in URL, and node's `name` in body. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, and `name`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodeDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New node created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for node creation."
          },
          "403": {
            "description": "Unauthorized request for node creation."
          },
          "409": {
            "description": "Node name taken."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}": {
      "get": {
        "operationId": "NodeHttpController_getNodeDetails",
        "summary": "Get data of nodes that belong to your team.",
        "description": "Fetch data of a specific node. Request must include `teamSlug` in URL, and `nodeId` in body. Response should include an array with the node's `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, `name`, `hasToken`, and agent installation details.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Data of the node.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for node details."
          },
          "403": {
            "description": "Unauthorized request for node details."
          },
          "404": {
            "description": "Node not found."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "put": {
        "operationId": "NodeHttpController_updateNode",
        "summary": "Update details of a node.",
        "description": "Request must include the `teamSlug` in URL, and node's `name` in body, body can include `description` and `icon`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNodeDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Node details modified."
          },
          "400": {
            "description": "Bad request for node details."
          },
          "403": {
            "description": "Unauthorized request for node details."
          },
          "404": {
            "description": "Node not found."
          },
          "409": {
            "description": "Node name taken."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "NodeHttpController_deleteNode",
        "summary": "Delete node.",
        "description": "Request must include the `teamSlug` in URL, and node's `name` in body.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Node deleted."
          },
          "403": {
            "description": "Unauthorized request for node delete."
          },
          "404": {
            "description": "Node not found."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/script": {
      "post": {
        "operationId": "NodeHttpController_generateScript",
        "summary": "Create agent install script.",
        "description": "Request must include `teamSlug` in URL and `nodeId`, `type`, and `scriptType`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NodeGenerateScriptDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Install script generated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeInstallDto"
                }
              }
            }
          },
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeInstallDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for an install script."
          },
          "403": {
            "description": "Unauthorized request for an install script."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "delete": {
        "operationId": "NodeHttpController_discardScript",
        "summary": "Delete node set up install script.",
        "description": "Request must include the `teamSlug` in URL, and node's `name` in body.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Agent install script deleted."
          },
          "403": {
            "description": "Unauthorized request for script delete."
          },
          "404": {
            "description": "Install script not found."
          }
        },
        "tags": [
          "nodes"
        ]
      },
      "get": {
        "operationId": "NodeHttpController_getScript",
        "summary": "Fetch install script.",
        "description": "Request must include the `teamSlug` in URL, and node's `name` in body. Response should include `type`, `status`, `description`, `icon`, `address`, `connectedAt` date, `version`, `updating`, `id`, `name`, `hasToken`, and `install` details.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for an install script."
          },
          "403": {
            "description": "Unauthorized request for an install script."
          },
          "404": {
            "description": "Install script not found."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/token": {
      "delete": {
        "operationId": "NodeHttpController_revokeToken",
        "summary": "Revoke the node's access token.",
        "description": "Request must include the `teamSlug` in URL, and node's `name` in body.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Token revoked."
          },
          "403": {
            "description": "Unauthorized request for a token."
          },
          "404": {
            "description": "Token not found."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/update": {
      "post": {
        "operationId": "NodeHttpController_updateNodeAgent",
        "summary": "Update the agent.",
        "description": "Request must include the `teamSlug` in URL, and node's `name` in body.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Node details modified."
          },
          "400": {
            "description": "Bad request for node details."
          },
          "403": {
            "description": "Unauthorized request for node details."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/audit": {
      "get": {
        "operationId": "NodeHttpController_getAuditLog",
        "summary": "Fetch audit log.",
        "description": "Request must include `teamSlug` in URL, and its body must include `skip`, `take`, and dates of `from` and `to`. Response should include an array of `items`: `createdAt` date, `event`, and `data`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "from",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of the audit log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodeAuditLogListDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for audit log."
          },
          "403": {
            "description": "Unauthorized request for audit log."
          },
          "404": {
            "description": "Audit log not found."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/{prefix}/containers/{name}/start": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_startContainer",
        "summary": "Start a container deployed with dyrector.io on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container started."
          },
          "400": {
            "description": "Bad request for container starting."
          },
          "403": {
            "description": "Unauthorized request for container starting."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/{prefix}/containers/{name}/stop": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_stopContainer",
        "summary": "Stop a container deployed with dyrector.io on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container stopped."
          },
          "400": {
            "description": "Bad request for container stopping."
          },
          "403": {
            "description": "Unauthorized request for container stopping."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/{prefix}/containers/{name}/restart": {
      "post": {
        "operationId": "NodePrefixContainerHttpController_restartContainer",
        "summary": "Restart a container deployed with dyrector.io on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container restarted."
          },
          "400": {
            "description": "Bad request for container restarting."
          },
          "403": {
            "description": "Unauthorized request for container restarting."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/{prefix}/containers": {
      "delete": {
        "operationId": "NodePrefixContainerHttpController_deleteAllContainers",
        "summary": "Delete containers deployed with dyrector.io, with the specified prefix on a node.",
        "description": "Request must include `nodeId`, and `prefix`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Containers deleted."
          },
          "403": {
            "description": "Unauthorized request for container delete."
          },
          "404": {
            "description": "Container not found."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/{prefix}/containers/{name}": {
      "delete": {
        "operationId": "NodePrefixContainerHttpController_deleteContainer",
        "summary": "Delete a container deployed with dyrector.io, with the specified prefix and name on a node.",
        "description": "Request must include `nodeId`, `prefix`, and `name`.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container deleted."
          },
          "403": {
            "description": "Unauthorized request for container delete."
          },
          "404": {
            "description": "Container not found."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/containers": {
      "get": {
        "operationId": "NodeGlobalContainerHttpController_getContainers",
        "summary": "Fetch data of all containers on a node.",
        "description": "Request must include `nodeId` and `prefix`. Response should include `id`, `command`, `createdAt`, `state`, `status`, `imageName`, `imageTag` and `ports` of images.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prefix",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Fetch data of containers running on a node.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContainerDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for containers."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/containers/{name}/start": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_startContainer",
        "summary": "Start the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container started."
          },
          "400": {
            "description": "Bad request for container starting."
          },
          "403": {
            "description": "Unauthorized request for container starting."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/containers/{name}/stop": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_stopContainer",
        "summary": "Stop the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container stopped."
          },
          "400": {
            "description": "Bad request for container stopping."
          },
          "403": {
            "description": "Unauthorized request for container stopping."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/containers/{name}/restart": {
      "post": {
        "operationId": "NodeGlobalContainerHttpController_restartContainer",
        "summary": "Restart the specific container on a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container restarted."
          },
          "400": {
            "description": "Bad request for container restarting."
          },
          "403": {
            "description": "Unauthorized request for container restarting."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/nodes/{nodeId}/containers/{name}": {
      "delete": {
        "operationId": "NodeGlobalContainerHttpController_deleteContainer",
        "summary": "Delete the specific container from a node.",
        "description": "Request must include `nodeId`, and the `name` of the container.",
        "parameters": [
          {
            "name": "nodeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Container deleted."
          },
          "403": {
            "description": "Unauthorized request for container delete."
          },
          "404": {
            "description": "Container not found."
          }
        },
        "tags": [
          "nodes"
        ]
      }
    },
    "/api/{teamSlug}/audit-log": {
      "get": {
        "operationId": "AuditController_getAuditLog",
        "summary": "Fetch audit log.",
        "description": "Request must include `skip`, `take`, and dates of `from` and `to`. Response should include an array of `items`: `createdAt` date, `userId`, `email`, `serviceCall`, and `data`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": true,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          },
          {
            "name": "to",
            "required": true,
            "in": "query",
            "schema": {
              "format": "date-time",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated list of the audit log.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditLogListDto"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for audit logs."
          }
        },
        "tags": [
          "audit-log"
        ]
      }
    },
    "/api/health": {
      "get": {
        "operationId": "HealthHttpController_getHealth",
        "summary": "Return service status of the platform.",
        "description": "Response should include `status`, `version` of the platform and `lastMigration` of database.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Service status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthDto"
                }
              }
            }
          }
        },
        "tags": [
          "health"
        ]
      }
    },
    "/api/{teamSlug}/notifications": {
      "get": {
        "operationId": "NotificationHttpController_getNotifications",
        "summary": "Retrieve notifications that belong to a team.",
        "description": "Response should include `teamSlug` in the URL, `type`, `id`, `name`, `url`, `active`, and `creatorName` in the body.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Notifications listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for notifications."
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "post": {
        "operationId": "NotificationHttpController_createNotification",
        "summary": "Create a new notification.",
        "description": "Request must include `teamSlug` in the URL, `type`, `enabledEvents`, `id`, `name`, `url`, and `active` in the body. Response should list `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New notification created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for a notification."
          },
          "403": {
            "description": "Unauthorized request for a notification."
          },
          "409": {
            "description": "Notification name taken."
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/{teamSlug}/notifications/{notificationId}": {
      "get": {
        "operationId": "NotificationHttpController_getNotificationDetails",
        "summary": "Fetch details of a notification.",
        "description": "Request must include `teamSlug` and `notificationId` parameters in URL. Response should include `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of notification listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for notification details."
          },
          "403": {
            "description": "Unauthorized request for notification details."
          },
          "404": {
            "description": "Notification not found."
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "put": {
        "operationId": "NotificationHttpController_updateNotification",
        "summary": "Modify a notification.",
        "description": "Request must include `teamSlug` in the URL, `type`, `enabledEvents`, `id`, `name`, `url`, and `active` in the body. Response should include `type`, `enabledEvents`, `id`, `name`, `url`, `active`, and `creatorName`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Notification modified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDetailsDto"
                }
              }
            }
          },
          "204": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for a notification."
          },
          "403": {
            "description": "Unauthorized request for a notification."
          },
          "404": {
            "description": "Notification not found."
          },
          "409": {
            "description": "Notification name taken."
          }
        },
        "tags": [
          "notifications"
        ]
      },
      "delete": {
        "operationId": "NotificationHttpController_deleteNotification",
        "summary": "Delete a notification.",
        "description": "Request must include `teamSlug` and `notificationId` in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Notification deleted."
          },
          "403": {
            "description": "Unauthorized request for notification delete."
          },
          "404": {
            "description": "Notification not found."
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/{teamSlug}/notifications/{notificationId}/test": {
      "post": {
        "operationId": "NotificationHttpController_testNotification",
        "summary": "Send a test message.",
        "description": "Request must include `teamSlug` and `notificationId` in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Test message sent."
          },
          "400": {
            "description": "Bad request for a test message."
          },
          "403": {
            "description": "Unauthorized request for a test message."
          }
        },
        "tags": [
          "notifications"
        ]
      }
    },
    "/api/templates": {
      "get": {
        "operationId": "TemplateHttpController_getTemplates",
        "summary": "Return list of templates on the platform.",
        "description": "Response should include `id`, `name`, `description` and `technologies` of templates.",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Templates listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for templates."
          }
        },
        "tags": [
          "templates"
        ]
      },
      "post": {
        "operationId": "TemplateHttpController_createProject",
        "summary": "Creates a new project from the selected template.",
        "description": "Request must include `type`, `id`, and `name`. Response should include `id`, `name`, `description`, `type`, and `audit` log details of templates.",
        "parameters": [
          
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectFromTemplateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New project created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for project creation."
          },
          "403": {
            "description": "Unauthorized request for project creation."
          },
          "409": {
            "description": "Project name taken."
          }
        },
        "tags": [
          "templates"
        ]
      }
    },
    "/api/templates/{templateId}/image": {
      "get": {
        "operationId": "TemplateHttpController_getImage",
        "summary": "Retrieves the picture of the template",
        "description": "Request must include `templateId`.",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve data of an image of a template."
          },
          "400": {
            "description": "Bad request for template images."
          },
          "403": {
            "description": "Unauthorized request for template images."
          },
          "404": {
            "description": "Template images not found."
          }
        },
        "tags": [
          "templates"
        ]
      }
    },
    "/api/{teamSlug}/dashboard": {
      "get": {
        "operationId": "DashboardHttpController_getDashboard",
        "summary": "Fetch dashboard data of latest activities.",
        "description": "`teamSlug` is required in URL. Response should include `users`, number of `auditLogEntries`, `projects`, `versions`, `deployments`, `failedDeployments`, details of `nodes`, `latestDeployments` and `auditLog` entries.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dashboard data listed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardDto"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for the dashboard."
          }
        },
        "tags": [
          "dashboard"
        ]
      }
    },
    "/api/{teamSlug}/storages": {
      "get": {
        "operationId": "StorageHttpController_getStorages",
        "summary": "Fetch the list of storages.",
        "description": "Response should include `description`, `icon`, `url`, `id`, and `name`. `teamSlug` is required in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of storages.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageDto"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for storages."
          }
        },
        "tags": [
          "storages"
        ]
      },
      "post": {
        "operationId": "StorageHttpController_createStorage",
        "summary": "Create a new storage.",
        "description": "Creates a new storage. Request must include `teamSlug` in URL, body is required to include `name`, and `url`. Request body may include `description`, `icon`, `accesKey`, and `secretKey`. Response should include `description`, `icon`, `url`, `id`, `name`, `accessKey`, `secretKey`, and `inUse`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStorageDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New storage created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for storage creation."
          },
          "403": {
            "description": "Unauthorized request for storage creation."
          },
          "409": {
            "description": "Storage name taken."
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/{teamSlug}/storages/options": {
      "get": {
        "operationId": "StorageHttpController_getStorageOptions",
        "summary": "Fetch the name and ID of available storage options.",
        "description": "Response should include `id`, and `name`. `teamSlug` is required in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Name and ID of storage options listed.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StorageOptionDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request for storage options."
          },
          "403": {
            "description": "Unauthorized request for storage options."
          },
          "404": {
            "description": "Storage options not found."
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/{teamSlug}/storages/{storageId}": {
      "get": {
        "operationId": "StorageHttpController_getStorageDetails",
        "summary": "Return details of a storage.",
        "description": "Get the details of a storage. Request must include `teamSlug` and `storageId` in URL. Response should include description, icon, url, `id`, `name`, `accessKey`, `secretKey`, and `inUse`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Storage details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StorageDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request for storage details."
          },
          "403": {
            "description": "Unauthorized request for storage details."
          },
          "404": {
            "description": "Storage not found."
          }
        },
        "tags": [
          "storages"
        ]
      },
      "put": {
        "operationId": "StorageHttpController_updateStorage",
        "summary": "Modify a storage.",
        "description": "Updates a storage. Request must include `teamSlug`and `storageId` in URL. `name`, and `url` must be included in body. Request body may include `description`, `icon`, `accesKey`, and `secretKey`.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStorageDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Storage updated."
          },
          "400": {
            "description": "Bad request for storage update."
          },
          "403": {
            "description": "Unauthorized request for storage update."
          },
          "404": {
            "description": "Storage not found."
          },
          "409": {
            "description": "Storage name taken."
          }
        },
        "tags": [
          "storages"
        ]
      },
      "delete": {
        "operationId": "StorageHttpController_deleteStorage",
        "summary": "Delete a storage from dyrector.io.",
        "description": "Deletes a storage. Request must include `teamSlug` and `storageId` in URL.",
        "parameters": [
          {
            "name": "teamSlug",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "storageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Storage deleted."
          },
          "403": {
            "description": "Unauthorized request for storage delete."
          },
          "404": {
            "description": "Storage not found."
          }
        },
        "tags": [
          "storages"
        ]
      }
    },
    "/api/metrics": {
      "get": {
        "operationId": "MetricsHttpController_index",
        "parameters": [
          
        ],
        "responses": {
          "200": {
            "description": "Prometheus metrics.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized request for Prometheus."
          }
        },
        "tags": [
          "metrics"
        ]
      }
    }
  },
  "info": {
    "title": "dyrector.io platform API",
    "description": "The dyrector.io platform API documentation.",
    "version": "0.7.0",
    "contact": {
      
    }
  },
  "tags": [
    {
      "name": "projects",
      "description": "There are two kinds of projects in dyrector.io: Versionless and Versioned. Versionless projects make up one deployable unit without versioning, while Versioned projects come with multiple rolling or incremental versions. More details in dyrector.io platform [documentation](https://docs.dyrector.io/tutorials/create-your-project)."
    },
    {
      "name": "versions",
      "description": "Versions belong to projects. While Versionless Projects seemingly do not have a version, they act as a rolling version of a Versioned Project.</br></br>The purpose of versions is to separate different variations of your project. They can be either rolling or incremental. One Versioned Project can have multiple versions of both types. More details about rolling and incremental versions in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#project)."
    },
    {
      "name": "version/images",
      "description": "Images make up a Versioned Project's version, or a Versionless Project."
    },
    {
      "name": "registries",
      "description": "Registries are 3rd party registries where the images of versions are located. Learn more about registries in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#registry)."
    },
    {
      "name": "teams",
      "description": "Teams are the shared entity of multiple users. The purpose of teams is to separate users, nodes and projects based on their needs within an organization. Team owners can assign roles. More details about teams in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#team)."
    },
    {
      "name": "users/me",
      "description": "users/me cover endpoints related to your user profile."
    },
    {
      "name": "deployments",
      "description": "Deployments are the process that gets the installation of your versions or Versionless Projects done on the node of your choice. More details about deployments in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#deployment)."
    },
    {
      "name": "tokens",
      "description": "Tokens are the access tokens that grant you access to a user profile and the teams the profile is a member of."
    },
    {
      "name": "nodes",
      "description": "Nodes are the deployment targets. Nodes are registered by installing at least one of the agents - crane for Kubernetes, dagent for Docker. These agents connect the platform to your node. One team can have as many nodes as they like.</br></br>Node installation takes place with Shell or PowerShell scripts, which can be created or revoked. More details in dyrector.io platform [documentation](https://docs.dyrector.io/get-started/components#node)."
    },
    {
      "name": "audit-log",
      "description": "Audit log is a log of team activity generated by the platform."
    },
    {
      "name": "health",
      "description": "Health refers to the status of the different services that make up the platform. It can be checked to see if the platform works properly."
    },
    {
      "name": "notifications",
      "description": "Notifications are chat notifications in Slack, Discord, and Teams. They send an automated message about deployments, new versions, new nodes, and new users. More details in dyrector.io platform [documentation](https://docs.dyrector.io/tutorials/create-chat-notifications)."
    },
    {
      "name": "templates",
      "description": "Templates are preset applications that can be turned into a project right away. They can be deployed with minimal configuration. More details about templates in dyrector.io platform [documentation](https://docs.dyrector.io/features/templates)."
    },
    {
      "name": "dashboard",
      "description": "Dashboard summarizes the latest activities of a team."
    },
    {
      "name": "storages",
      "description": "Storages are S3 compatible memory storages. They can be used for file injection. More details in dyrector.io platform [documentation](https://docs.dyrector.io/features/storage)."
    }
  ],
  "servers": [
    
  ],
  "components": {
    "securitySchemes": {
      "jwt": {
        "scheme": "bearer",
        "bearerFormat": "Bearer",
        "type": "http",
        "description": "Please enter token in following format: "
      }
    },
    "schemas": {
      "AuditDto": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedBy": {
            "type": "string"
          }
        },
        "required": [
          "createdAt",
          "createdBy",
          "updatedAt",
          "updatedBy"
        ]
      },
      "ProjectListItemDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "versionCount": {
            "type": "number"
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "audit",
          "id",
          "name"
        ]
      },
      "VersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "changelog": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "increasable": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "audit",
          "default",
          "increasable",
          "id",
          "name"
        ]
      },
      "ProjectDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "deletable": {
            "type": "boolean"
          },
          "versions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VersionDto"
            }
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "deletable",
          "versions",
          "audit",
          "id",
          "name"
        ]
      },
      "CreateProjectDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "changelog": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "UpdateProjectDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "changelog": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "name"
        ]
      },
      "UniqueKeyValueDto": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "value",
          "id",
          "key"
        ]
      },
      "UniqueSecretKeyDto": {
        "type": "object",
        "properties": {
          "required": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "required",
          "id",
          "key"
        ]
      },
      "ContainerConfigRoutingDto": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "stripPath": {
            "type": "boolean"
          },
          "uploadLimit": {
            "type": "string"
          }
        }
      },
      "ConfigContainerDto": {
        "type": "object",
        "properties": {
          "image": {
            "type": "string"
          },
          "volume": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "keepFiles": {
            "type": "boolean"
          }
        },
        "required": [
          "image",
          "volume",
          "path",
          "keepFiles"
        ]
      },
      "PortDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "internal": {
            "type": "number"
          },
          "external": {
            "type": "number"
          }
        },
        "required": [
          "id",
          "internal"
        ]
      },
      "PortRangeDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "number"
          },
          "to": {
            "type": "number"
          }
        },
        "required": [
          "from",
          "to"
        ]
      },
      "ContainerConfigPortRangeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "internal": {
            "$ref": "#/components/schemas/PortRangeDto"
          },
          "external": {
            "$ref": "#/components/schemas/PortRangeDto"
          }
        },
        "required": [
          "id",
          "internal",
          "external"
        ]
      },
      "VolumeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "ro",
              "rwo",
              "rwx",
              "mem",
              "tmp"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "class": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "path"
        ]
      },
      "UniqueKeyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "key"
        ]
      },
      "InitContainerVolumeLinkDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "path"
        ]
      },
      "InitContainerDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "command": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "useParentConfig": {
            "type": "boolean"
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerVolumeLinkDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "image",
          "command",
          "args",
          "environment",
          "useParentConfig",
          "volumes"
        ]
      },
      "ContainerStorageDto": {
        "type": "object",
        "properties": {
          "storageId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "bucket": {
            "type": "string"
          }
        }
      },
      "LogDto": {
        "type": "object",
        "properties": {
          "driver": {
            "type": "string",
            "enum": [
              "nodeDefault",
              "none",
              "gcplogs",
              "local",
              "json-file",
              "syslog",
              "journald",
              "gelf",
              "fluentd",
              "awslogs",
              "splunk",
              "etwlogs",
              "logentries"
            ]
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          }
        },
        "required": [
          "driver",
          "options"
        ]
      },
      "HealthCheckDto": {
        "type": "object",
        "properties": {
          "port": {
            "type": "number"
          },
          "livenessProbe": {
            "type": "string"
          },
          "readinessProbe": {
            "type": "string"
          },
          "startupProbe": {
            "type": "string"
          }
        }
      },
      "ResourceDto": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "string"
          },
          "memory": {
            "type": "string"
          }
        }
      },
      "ResourceConfigDto": {
        "type": "object",
        "properties": {
          "limits": {
            "$ref": "#/components/schemas/ResourceDto"
          },
          "requests": {
            "$ref": "#/components/schemas/ResourceDto"
          }
        }
      },
      "MarkerDto": {
        "type": "object",
        "properties": {
          "service": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "deployment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "ingress": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          }
        }
      },
      "ContainerConfigDto": {
        "type": "object",
        "properties": {
          "expose": {
            "type": "string",
            "enum": [
              "none",
              "expose",
              "exposeWithTls"
            ]
          },
          "restartPolicy": {
            "type": "string",
            "enum": [
              "always",
              "unlessStopped",
              "no",
              "onFailure"
            ]
          },
          "networkMode": {
            "type": "string",
            "enum": [
              "none",
              "host",
              "bridge"
            ]
          },
          "deploymentStrategy": {
            "type": "string",
            "enum": [
              "recreate",
              "rolling"
            ]
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueSecretKeyDto"
            }
          },
          "routing": {
            "$ref": "#/components/schemas/ContainerConfigRoutingDto"
          },
          "user": {
            "type": "number"
          },
          "tty": {
            "type": "boolean"
          },
          "configContainer": {
            "$ref": "#/components/schemas/ConfigContainerDto"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortDto"
            }
          },
          "portRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerConfigPortRangeDto"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeDto"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerDto"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/ContainerStorageDto"
          },
          "logConfig": {
            "$ref": "#/components/schemas/LogDto"
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "dockerLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "proxyHeaders": {
            "type": "boolean"
          },
          "useLoadBalancer": {
            "type": "boolean"
          },
          "extraLBAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "healthCheckConfig": {
            "$ref": "#/components/schemas/HealthCheckDto"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/ResourceConfigDto"
          },
          "annotations": {
            "$ref": "#/components/schemas/MarkerDto"
          },
          "labels": {
            "$ref": "#/components/schemas/MarkerDto"
          }
        },
        "required": [
          "expose",
          "restartPolicy",
          "networkMode",
          "deploymentStrategy",
          "name",
          "tty",
          "proxyHeaders",
          "useLoadBalancer"
        ]
      },
      "BasicRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "v2",
              "hub",
              "gitlab",
              "github",
              "google",
              "unchecked"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "ImageDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "number"
          },
          "config": {
            "$ref": "#/components/schemas/ContainerConfigDto"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "registry": {
            "$ref": "#/components/schemas/BasicRegistryDto"
          }
        },
        "required": [
          "id",
          "name",
          "order",
          "config",
          "createdAt",
          "registry"
        ]
      },
      "BasicNodeWithStatus": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected",
              "outdated"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "DeploymentWithBasicNodeDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "note": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "node": {
            "$ref": "#/components/schemas/BasicNodeWithStatus"
          },
          "id": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "updatedAt",
          "node",
          "id",
          "prefix"
        ]
      },
      "VersionDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "changelog": {
            "type": "string"
          },
          "default": {
            "type": "boolean"
          },
          "increasable": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "mutable": {
            "type": "boolean"
          },
          "deletable": {
            "type": "boolean"
          },
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageDto"
            }
          },
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentWithBasicNodeDto"
            }
          }
        },
        "required": [
          "type",
          "audit",
          "default",
          "increasable",
          "id",
          "name",
          "mutable",
          "deletable",
          "images",
          "deployments"
        ]
      },
      "CreateVersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "name": {
            "type": "string"
          },
          "changelog": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "name"
        ]
      },
      "UpdateVersionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "changelog": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "IncreaseVersionDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "changelog": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "AddImagesDto": {
        "type": "object",
        "properties": {
          "registryId": {
            "type": "string"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "registryId",
          "images"
        ]
      },
      "PartialContainerConfigDto": {
        "type": "object",
        "properties": {
          "expose": {
            "type": "string",
            "enum": [
              "none",
              "expose",
              "exposeWithTls"
            ]
          },
          "restartPolicy": {
            "type": "string",
            "enum": [
              "always",
              "unlessStopped",
              "no",
              "onFailure"
            ]
          },
          "networkMode": {
            "type": "string",
            "enum": [
              "none",
              "host",
              "bridge"
            ]
          },
          "deploymentStrategy": {
            "type": "string",
            "enum": [
              "recreate",
              "rolling"
            ]
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueSecretKeyDto"
            }
          },
          "routing": {
            "$ref": "#/components/schemas/ContainerConfigRoutingDto"
          },
          "user": {
            "type": "number"
          },
          "tty": {
            "type": "boolean"
          },
          "configContainer": {
            "$ref": "#/components/schemas/ConfigContainerDto"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortDto"
            }
          },
          "portRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerConfigPortRangeDto"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeDto"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerDto"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/ContainerStorageDto"
          },
          "logConfig": {
            "$ref": "#/components/schemas/LogDto"
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "dockerLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "proxyHeaders": {
            "type": "boolean"
          },
          "useLoadBalancer": {
            "type": "boolean"
          },
          "extraLBAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "healthCheckConfig": {
            "$ref": "#/components/schemas/HealthCheckDto"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/ResourceConfigDto"
          },
          "annotations": {
            "$ref": "#/components/schemas/MarkerDto"
          },
          "labels": {
            "$ref": "#/components/schemas/MarkerDto"
          }
        }
      },
      "PatchImageDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "nullable": true
          },
          "config": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PartialContainerConfigDto"
              }
            ]
          }
        }
      },
      "RegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "v2",
              "hub",
              "gitlab",
              "github",
              "google",
              "unchecked"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "url"
        ]
      },
      "HubRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "imageNamePrefix": {
            "type": "string"
          }
        },
        "required": [
          "imageNamePrefix"
        ]
      },
      "V2RegistryDetailsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "url"
        ]
      },
      "GitlabRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "user": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "imageNamePrefix": {
            "type": "string"
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "apiUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "namespace",
          "user",
          "token",
          "imageNamePrefix"
        ]
      },
      "GithubRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "namespace": {
            "type": "string",
            "enum": [
              "organization",
              "user"
            ]
          },
          "user": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "imageNamePrefix": {
            "type": "string"
          }
        },
        "required": [
          "namespace",
          "user",
          "token",
          "imageNamePrefix"
        ]
      },
      "GoogleRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "user": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "nullable": true
          },
          "imageNamePrefix": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "imageNamePrefix"
        ]
      },
      "UncheckedRegistryDetailsDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "RegistryDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          },
          "inUse": {
            "type": "boolean"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "type",
          "details",
          "id",
          "name",
          "inUse",
          "createdAt",
          "updatedAt"
        ]
      },
      "CreateRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "details",
          "name"
        ]
      },
      "UpdateRegistryDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "group",
              "project"
            ]
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/HubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/V2RegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GitlabRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GithubRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/GoogleRegistryDetailsDto"
              },
              {
                "$ref": "#/components/schemas/UncheckedRegistryDetailsDto"
              }
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "type",
          "details",
          "name"
        ]
      },
      "TeamStatisticsDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "number"
          },
          "projects": {
            "type": "number"
          },
          "nodes": {
            "type": "number"
          },
          "versions": {
            "type": "number"
          },
          "deployments": {
            "type": "number"
          }
        },
        "required": [
          "users",
          "projects",
          "nodes",
          "versions",
          "deployments"
        ]
      },
      "TeamDto": {
        "type": "object",
        "properties": {
          "statistics": {
            "$ref": "#/components/schemas/TeamStatisticsDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "statistics",
          "id",
          "name",
          "slug"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "expired",
              "declined"
            ]
          },
          "email": {
            "type": "string"
          },
          "lastLogin": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "role",
          "status",
          "email",
          "id",
          "name"
        ]
      },
      "TeamDetailsDto": {
        "type": "object",
        "properties": {
          "statistics": {
            "$ref": "#/components/schemas/TeamStatisticsDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            }
          }
        },
        "required": [
          "statistics",
          "id",
          "name",
          "slug",
          "users"
        ]
      },
      "CreateTeamDto": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "slug",
          "name"
        ]
      },
      "UpdateTeamDto": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "slug",
          "name"
        ]
      },
      "InviteUserDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "captcha": {
            "type": "string"
          }
        },
        "required": [
          "email",
          "firstName"
        ]
      },
      "UpdateUserRoleDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user"
            ]
          }
        },
        "required": [
          "role"
        ]
      },
      "BasicUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "UserMetaTeamDto": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "owner",
              "admin",
              "user"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "role",
          "id",
          "name",
          "slug"
        ]
      },
      "BasicTeamDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "slug"
        ]
      },
      "UserMetaDto": {
        "type": "object",
        "properties": {
          "user": {
            "$ref": "#/components/schemas/BasicUserDto"
          },
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserMetaTeamDto"
            }
          },
          "invitations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasicTeamDto"
            }
          }
        },
        "required": [
          "user",
          "teams",
          "invitations"
        ]
      },
      "BasicProjectDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "BasicVersionDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "incremental",
              "rolling"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "BasicNodeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "DeploymentDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "project": {
            "$ref": "#/components/schemas/BasicProjectDto"
          },
          "version": {
            "$ref": "#/components/schemas/BasicVersionDto"
          },
          "node": {
            "$ref": "#/components/schemas/BasicNodeDto"
          },
          "id": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "audit",
          "project",
          "version",
          "node",
          "id",
          "prefix"
        ]
      },
      "UniqueSecretKeyValueDto": {
        "type": "object",
        "properties": {
          "required": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "encrypted": {
            "type": "boolean"
          },
          "publicKey": {
            "type": "string"
          }
        },
        "required": [
          "required",
          "id",
          "key",
          "value",
          "encrypted"
        ]
      },
      "InstanceContainerConfigDto": {
        "type": "object",
        "properties": {
          "expose": {
            "type": "string",
            "enum": [
              "none",
              "expose",
              "exposeWithTls"
            ]
          },
          "restartPolicy": {
            "type": "string",
            "enum": [
              "always",
              "unlessStopped",
              "no",
              "onFailure"
            ]
          },
          "networkMode": {
            "type": "string",
            "enum": [
              "none",
              "host",
              "bridge"
            ]
          },
          "deploymentStrategy": {
            "type": "string",
            "enum": [
              "recreate",
              "rolling"
            ]
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueSecretKeyValueDto"
            }
          },
          "name": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "routing": {
            "$ref": "#/components/schemas/ContainerConfigRoutingDto"
          },
          "user": {
            "type": "number"
          },
          "tty": {
            "type": "boolean"
          },
          "configContainer": {
            "$ref": "#/components/schemas/ConfigContainerDto"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortDto"
            }
          },
          "portRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerConfigPortRangeDto"
            }
          },
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeDto"
            }
          },
          "commands": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "initContainers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitContainerDto"
            }
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "storage": {
            "$ref": "#/components/schemas/ContainerStorageDto"
          },
          "logConfig": {
            "$ref": "#/components/schemas/LogDto"
          },
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "dockerLabels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyDto"
            }
          },
          "proxyHeaders": {
            "type": "boolean"
          },
          "useLoadBalancer": {
            "type": "boolean"
          },
          "extraLBAnnotations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "healthCheckConfig": {
            "$ref": "#/components/schemas/HealthCheckDto"
          },
          "resourceConfig": {
            "$ref": "#/components/schemas/ResourceConfigDto"
          },
          "annotations": {
            "$ref": "#/components/schemas/MarkerDto"
          },
          "labels": {
            "$ref": "#/components/schemas/MarkerDto"
          }
        }
      },
      "InstanceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/ImageDto"
          },
          "config": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceContainerConfigDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "updatedAt",
          "image"
        ]
      },
      "DeploymentTokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ]
      },
      "DeploymentDetailsDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "note": {
            "type": "string",
            "nullable": true
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "project": {
            "$ref": "#/components/schemas/BasicProjectDto"
          },
          "version": {
            "$ref": "#/components/schemas/BasicVersionDto"
          },
          "node": {
            "$ref": "#/components/schemas/BasicNodeDto"
          },
          "id": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "environment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          },
          "publicKey": {
            "type": "string",
            "nullable": true
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceDto"
            }
          },
          "lastTry": {
            "type": "number"
          },
          "token": {
            "$ref": "#/components/schemas/DeploymentTokenDto"
          }
        },
        "required": [
          "status",
          "audit",
          "project",
          "version",
          "node",
          "id",
          "prefix",
          "environment",
          "instances",
          "lastTry",
          "token"
        ]
      },
      "ContainerIdentifierDto": {
        "type": "object",
        "properties": {
          "prefix": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "prefix",
          "name"
        ]
      },
      "InstanceSecretsDto": {
        "type": "object",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/ContainerIdentifierDto"
          },
          "publicKey": {
            "type": "string"
          },
          "keys": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "container",
          "publicKey"
        ]
      },
      "CreateDeploymentDto": {
        "type": "object",
        "properties": {
          "versionId": {
            "type": "string"
          },
          "nodeId": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "versionId",
          "nodeId",
          "prefix"
        ]
      },
      "PatchDeploymentDto": {
        "type": "object",
        "properties": {
          "note": {
            "type": "string",
            "nullable": true
          },
          "prefix": {
            "type": "string",
            "nullable": true
          },
          "environment": {
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UniqueKeyValueDto"
            }
          }
        }
      },
      "PatchInstanceDto": {
        "type": "object",
        "properties": {
          "config": {
            "$ref": "#/components/schemas/InstanceContainerConfigDto"
          }
        },
        "required": [
          "config"
        ]
      },
      "StartDeploymentDto": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CopyDeploymentDto": {
        "type": "object",
        "properties": {
          "nodeId": {
            "type": "string"
          },
          "prefix": {
            "type": "string"
          },
          "note": {
            "type": "string",
            "nullable": true
          }
        },
        "required": [
          "nodeId",
          "prefix"
        ]
      },
      "DeploymentEventContainerStateDto": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "running",
              "waiting",
              "exited"
            ]
          },
          "instanceId": {
            "type": "string"
          }
        },
        "required": [
          "instanceId"
        ]
      },
      "DeploymentEventDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "log",
              "deployment-status",
              "container-state"
            ]
          },
          "deploymentStatus": {
            "type": "string",
            "nullable": true,
            "enum": [
              "preparing",
              "in-progress",
              "successful",
              "failed",
              "obsolete"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "log": {
            "nullable": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "containerState": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DeploymentEventContainerStateDto"
              }
            ]
          }
        },
        "required": [
          "type",
          "createdAt"
        ]
      },
      "DeploymentLogListDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentEventDto"
            }
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "CreateDeploymentTokenDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "expirationInDays": {
            "type": "number"
          }
        },
        "required": [
          "name"
        ]
      },
      "DeploymentTokenCreatedDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string"
          },
          "curl": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "token",
          "curl"
        ]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt"
        ]
      },
      "GenerateTokenDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "expirationInDays": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "expirationInDays"
        ]
      },
      "GeneratedTokenDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expiresAt": {
            "format": "date-time",
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "createdAt",
          "token"
        ]
      },
      "NodeDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected",
              "outdated"
            ]
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "connectedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "updating": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name"
        ]
      },
      "NodeInstallDto": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string"
          },
          "script": {
            "type": "string"
          },
          "expireAt": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "command",
          "script",
          "expireAt"
        ]
      },
      "NodeDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "unreachable",
              "connected",
              "outdated"
            ]
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "connectedAt": {
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "updating": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "hasToken": {
            "type": "boolean"
          },
          "install": {
            "$ref": "#/components/schemas/NodeInstallDto"
          },
          "inUse": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "hasToken",
          "inUse"
        ]
      },
      "CreateNodeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateNodeDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "DagentTraefikOptionsDto": {
        "type": "object",
        "properties": {
          "acmeEmail": {
            "type": "string"
          }
        },
        "required": [
          "acmeEmail"
        ]
      },
      "NodeGenerateScriptDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "docker",
              "k8s"
            ]
          },
          "scriptType": {
            "type": "string",
            "enum": [
              "shell",
              "powershell"
            ]
          },
          "rootPath": {
            "type": "string"
          },
          "dagentTraefik": {
            "$ref": "#/components/schemas/DagentTraefikOptionsDto"
          }
        },
        "required": [
          "type",
          "scriptType"
        ]
      },
      "NodeAuditLogDto": {
        "type": "object",
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "createdAt",
          "event"
        ]
      },
      "NodeAuditLogListDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeAuditLogDto"
            }
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "ContainerPort": {
        "type": "object",
        "properties": {
          "internal": {
            "type": "number"
          },
          "external": {
            "type": "number"
          }
        },
        "required": [
          "internal",
          "external"
        ]
      },
      "ContainerDto": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "running",
              "waiting",
              "exited"
            ]
          },
          "id": {
            "$ref": "#/components/schemas/ContainerIdentifierDto"
          },
          "command": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "imageName": {
            "type": "string"
          },
          "imageTag": {
            "type": "string"
          },
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContainerPort"
            }
          }
        },
        "required": [
          "state",
          "id",
          "command",
          "createdAt",
          "reason",
          "imageName",
          "imageTag",
          "ports"
        ]
      },
      "AuditLogUserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "email"
        ]
      },
      "AuditLogDto": {
        "type": "object",
        "properties": {
          "actorType": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "patch",
              "delete"
            ]
          },
          "context": {
            "type": "string",
            "enum": [
              "http",
              "ws",
              "rpc"
            ]
          },
          "method": {
            "type": "string",
            "enum": [
              "get",
              "post",
              "put",
              "patch",
              "delete"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/AuditLogUserDto"
          },
          "name": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "actorType",
          "context",
          "createdAt",
          "name",
          "event"
        ]
      },
      "AuditLogListDto": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogDto"
            }
          },
          "total": {
            "type": "number"
          }
        },
        "required": [
          "items",
          "total"
        ]
      },
      "HealthDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "object"
          },
          "version": {
            "type": "string"
          },
          "lastMigration": {
            "type": "string"
          }
        },
        "required": [
          "status",
          "version"
        ]
      },
      "NotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "creatorName": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "url",
          "active",
          "creatorName"
        ]
      },
      "NotificationDetailsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "creatorName": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "enabledEvents",
          "id",
          "name",
          "url",
          "active",
          "creatorName"
        ]
      },
      "CreateNotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "enabledEvents",
          "name",
          "url",
          "active"
        ]
      },
      "UpdateNotificationDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "discord",
              "slack",
              "teams"
            ]
          },
          "enabledEvents": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "deployment-created",
                "version-created",
                "node-added",
                "user-invited"
              ]
            }
          },
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "type",
          "enabledEvents",
          "name",
          "url",
          "active"
        ]
      },
      "TemplateDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "technologies": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "name",
          "technologies"
        ]
      },
      "CreateProjectFromTemplateDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "id": {
            "type": "string"
          },
          "teamSlug": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "id",
          "teamSlug",
          "name"
        ]
      },
      "ProjectDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "versionless",
              "versioned"
            ]
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "audit": {
            "$ref": "#/components/schemas/AuditDto"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "audit",
          "id",
          "name"
        ]
      },
      "OnboardingItemDto": {
        "type": "object",
        "properties": {
          "done": {
            "type": "boolean"
          },
          "resourceId": {
            "type": "string"
          }
        },
        "required": [
          "done"
        ]
      },
      "OnboardingDto": {
        "type": "object",
        "properties": {
          "signUp": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          },
          "createTeam": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          },
          "createNode": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          },
          "createProject": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          },
          "createVersion": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          },
          "addImages": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          },
          "addDeployment": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          },
          "deploy": {
            "$ref": "#/components/schemas/OnboardingItemDto"
          }
        },
        "required": [
          "signUp",
          "createTeam",
          "createNode",
          "createProject",
          "createVersion",
          "addImages",
          "addDeployment",
          "deploy"
        ]
      },
      "DashboardDto": {
        "type": "object",
        "properties": {
          "users": {
            "type": "number"
          },
          "auditLog": {
            "type": "number"
          },
          "projects": {
            "type": "number"
          },
          "versions": {
            "type": "number"
          },
          "deployments": {
            "type": "number"
          },
          "failedDeployments": {
            "type": "number"
          },
          "onboarding": {
            "$ref": "#/components/schemas/OnboardingDto"
          }
        },
        "required": [
          "users",
          "auditLog",
          "projects",
          "versions",
          "deployments",
          "failedDeployments",
          "onboarding"
        ]
      },
      "StorageDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "url",
          "id",
          "name"
        ]
      },
      "StorageOptionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "StorageDetailsDto": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "inUse": {
            "type": "boolean"
          }
        },
        "required": [
          "url",
          "id",
          "name",
          "inUse"
        ]
      },
      "CreateStorageDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ]
      },
      "UpdateStorageDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "accessKey": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "url"
        ]
      }
    }
  }
}